<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客变更通知</title>
      <link href="/2022/09/10/%E5%8D%9A%E5%AE%A2%E5%8F%98%E6%9B%B4%E9%80%9A%E7%9F%A5/"/>
      <url>/2022/09/10/%E5%8D%9A%E5%AE%A2%E5%8F%98%E6%9B%B4%E9%80%9A%E7%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>这段时间，我的博客之旅可谓是一波三折，显示vercel搭建，indigo主题，然后是next接着尝试了icarus，最后vercel崩了，尝试去用netlify，最后到freenom获取域名，又换到了butterfly主题，稳定下来，还是学到很多的，现在博客网址变成了yzx-blog.tk,也基本尘埃落定，感谢大家对我的支持，谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> 公告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests详解(1)</title>
      <link href="/2022/09/03/requests%E8%AF%A6%E8%A7%A3(1)/"/>
      <url>/2022/09/03/requests%E8%AF%A6%E8%A7%A3(1)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>requests是Python中的一个网络请求库，可以用于实现调取api，获取网页源代码等功能</li><li>requests一共有很多种请求方式，我今天介绍最常用的2种，他们分别是get、post请求</li></ul><span id="more"></span><hr><h1 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h1><h3 id="get请求特点概述"><a href="#get请求特点概述" class="headerlink" title="get请求特点概述"></a>get请求特点概述</h3><ul><li>get请求是 <strong>获取数据</strong>(不建议用get提交数据)</li><li>请求的参数将以<code>?name:val</code>的形式呈现，<strong>不安全</strong></li><li>请求的 <strong>数据量有限制</strong>  ，一般是 <strong>8kb</strong></li><li>速度快</li></ul><h3 id="get请求基本使用方法"><a href="#get请求基本使用方法" class="headerlink" title="get请求基本使用方法"></a>get请求基本使用方法</h3><ul><li>参数讲解<br>  第一个参数为请求网址，第二个是请求头，第三个是请求数据  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response=requests.get(url,headers=head,params=params)</span><br></pre></td></tr></table></figure></li><li>请求头的一般写法<br>  这是应对一般的反爬虫网站的措施，请求头的数据量有限制  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">head = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  应用实例：<br>  <img src="https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/09/3_19_49_23_get%E8%AF%B7%E6%B1%82web%E5%AE%9E%E4%BE%8B.png"></li><li>数据的格式<br>  数据以字典的方式呈现，以下是数据格式的实例：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;print(1)&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  一般在网址上以?name1=val1&amp;name2=val2形式出现,有数据量限制</li></ul><hr><h1 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h1><h3 id="Post请求特点概述"><a href="#Post请求特点概述" class="headerlink" title="Post请求特点概述"></a>Post请求特点概述</h3><ul><li>post请求是 <strong>提交数据</strong></li><li><strong>不限制</strong> 提交数据的 <strong>大小</strong></li><li><strong>速度慢</strong> ,但是 <strong>安全</strong></li></ul><h3 id="Post请求方法"><a href="#Post请求方法" class="headerlink" title="Post请求方法"></a>Post请求方法</h3><ul><li>参数讲解：<br>  url为网址，headers请求头和上面的get请求一样，data是字典数据请求和get的params一样，json是json数据请求<ul><li>方法一：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response=requests.post(url,headers=head,data=payload)</span><br></pre></td></tr></table></figure></li><li>方法二：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response=requests.post(url,headers=head,json=payload)</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h1 id="其余的参数"><a href="#其余的参数" class="headerlink" title="其余的参数"></a>其余的参数</h1><ul><li><code>requests.post/get(url,headers=head,timeout=second)</code>:<br>设置接口连接的最大时间,单位为秒（超过该时间会抛出超时错误）</li><li><code>requests.post/get(url,headers=head,verify=False)</code><br><code>verify=True</code>(默认): 检查SSL证书认证  <code>verify=False</code>(常用): 忽略SSl证书认证</li></ul><hr><h1 id="其余的功能"><a href="#其余的功能" class="headerlink" title="其余的功能"></a>其余的功能</h1><ul><li><code>res.status_code</code> 获取状态码</li><li><code>res.request.headers</code> 获取请求头</li><li><code>res.headers</code> 获取响应头</li><li><code>res.content</code> 获取响应内容的二进制</li><li><code>res.text</code> url对应的页面内容，也就是网页源代码</li><li><code>res.apparent_encoding</code> 猜测编码</li><li><code>res.json()</code> 返回json数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Python </category>
          
          <category> 类库 </category>
          
          <category> Spider爬虫 </category>
          
          <category> requests </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Code </tag>
            
            <tag> Spider爬虫 </tag>
            
            <tag> 类库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python常见报错代码</title>
      <link href="/2022/08/29/Python%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E4%BB%A3%E7%A0%81/"/>
      <url>/2022/08/29/Python%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>在我们编写程序的时候，难免遇到报错，那这个时候有些人就去Baidu了，但是其实报错代码也是有迹可循的，看懂了报错代码就可以直接找到代码错误的根源</li><li>接下来我讲介绍常见的代码报错，</li><li>基本规律：会显示代码报错的行数，和这一行出现错误的具体位置，以及报错类型，一下我将仅针对报错的类型进行讲解</li></ul><hr><span id="more"></span><h2 id="缩进报错"><a href="#缩进报错" class="headerlink" title="缩进报错"></a>缩进报错</h2><ul><li><p>报错代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IndentationError: expected an indented block</span><br></pre></td></tr></table></figure></li><li><p>解决方案：<br>根据摆错的行数确定缩进错误的行，直接进行调整就可以</p></li></ul><hr><h2 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h2><h3 id="匹配错误"><a href="#匹配错误" class="headerlink" title="匹配错误"></a>匹配错误</h3><ul><li><p>报错代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: unexpected EOF <span class="keyword">while</span> parsing</span><br></pre></td></tr></table></figure></li><li><p>解决方案：<br>查看报错的那一行括号是否有缺漏，引号有没有缺漏、多行注释有没有缺漏</p></li></ul><h3 id="符号错误"><a href="#符号错误" class="headerlink" title="符号错误"></a>符号错误</h3><ul><li><p>报错代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">&quot;C:\Users\dell\学而思直播\code\cache\asset\6/main.py&quot;</span>, line <span class="number">2</span></span><br><span class="line">  <span class="keyword">if</span> a=<span class="number">1</span>:</span><br><span class="line">      ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure></li><li><p>解决方案<br>检查是否将== 写成= 把=写成==</p></li></ul><hr><h2 id="变量名错误"><a href="#变量名错误" class="headerlink" title="变量名错误"></a>变量名错误</h2><ul><li><p>报错代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">line1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  <span class="keyword">if</span> a==<span class="number">1</span>:</span><br><span class="line">NameError: name <span class="string">&#x27;a&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></li><li><p>解决方案：<br>检查变量是否定义，在函数中的话检查是否标明为全局变量 即为global 全局变量名 #声明一个全局变量</p></li></ul><h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h3><ul><li>只能是字母、下划线、和数字</li><li>数字不能作为变量名的开头部分</li><li>不能使用Python关键字，如print、input等</li></ul><hr><h2 id="索引错误"><a href="#索引错误" class="headerlink" title="索引错误"></a>索引错误</h2><ul><li><p>报错代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;main.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">list</span>[<span class="number">5</span>])</span><br><span class="line">IndexError: <span class="built_in">list</span> index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure></li><li><p>解决方案：<br>因为索引超过列表数量，所以检查是否索引是否过大或者过小(负索引)</p></li></ul><h2 id="文件查找错误"><a href="#文件查找错误" class="headerlink" title="文件查找错误"></a>文件查找错误</h2><ul><li><p>报错代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myImg = pygame.image.load(<span class="string">&quot;img1.png&quot;</span>)</span><br><span class="line">FileNotFoundError: No file <span class="string">&#x27;img1.png&#x27;</span> found inworking directory</span><br></pre></td></tr></table></figure></li><li><p>解决方案<br>查看是否有这个文件，是否文件名拼写错误</p></li></ul><h2 id="类型错误"><a href="#类型错误" class="headerlink" title="类型错误"></a>类型错误</h2><ul><li><p>报错代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;main.py&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;123&quot;</span>+<span class="number">123</span>)</span><br><span class="line">TypeError: must be <span class="built_in">str</span>, <span class="keyword">not</span> <span class="built_in">int</span></span><br></pre></td></tr></table></figure></li><li><p>解决方案<br>检查函数的每个参数的类型是否错误，不同变量不能相加</p></li></ul><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>有BUG并不可怕，仔细查看报错代码，仔细推敲就可以修复</p><hr>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Python </category>
          
          <category> Python小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sprite精灵实现Pygame矩形、圆形、精细碰撞</title>
      <link href="/2022/08/20/Sprite%E7%B2%BE%E7%81%B5%E5%AE%9E%E7%8E%B0Pygame%E7%9F%A9%E5%BD%A2%E3%80%81%E5%9C%86%E5%BD%A2%E3%80%81%E7%B2%BE%E7%BB%86%E7%A2%B0%E6%92%9E/"/>
      <url>/2022/08/20/Sprite%E7%B2%BE%E7%81%B5%E5%AE%9E%E7%8E%B0Pygame%E7%9F%A9%E5%BD%A2%E3%80%81%E5%9C%86%E5%BD%A2%E3%80%81%E7%B2%BE%E7%BB%86%E7%A2%B0%E6%92%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>如果你有Pygame有一定的基础，并用过Pygame编写过游戏那么你一定有一个烦恼那就是当两个图像碰撞检测时，往往采用的是矩形碰撞检测这样就会导致，两个图案实际上还没有碰到，Pygame就识别为碰到了</p></li><li><p>而Pygame中的Mask(遮罩)模块就是解决这个问题很好的方法，我们把这种用Mask实现碰撞检测的方法叫做精细碰撞，然而，这种方法实现的 <strong>难度稍微有点大</strong> ，而且 <strong>代码碎片很多</strong> ，<strong>很凌乱</strong></p></li><li><p>而在Pygame中有这么一个类，专门是为游戏角色而设置的，这个类就是 <strong>Sprite精灵类</strong> ，这个类里面就有帮我们封装好的三种碰撞检测方法：Rect、Circle、Mask，其中Mask就是上面提到的遮罩</p><span id="more"></span><h2 id="Sprite精灵类实现精细碰撞"><a href="#Sprite精灵类实现精细碰撞" class="headerlink" title="Sprite精灵类实现精细碰撞"></a>Sprite精灵类实现精细碰撞</h2></li><li><p>创建精灵</p><ul><li><p>这里是创建了一个名为s的类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = pygame.sprite.Sprite()</span><br><span class="line">s.image = pygame.transform.scale(pygame.image.load(<span class="string">&#x27;file.png&#x27;</span>),(width,height))</span><br><span class="line">s.rect = pygame.Rect(x,y,width,height)</span><br></pre></td></tr></table></figure></li><li><p>实例：创建两个待碰撞精灵，并为其image和rect属性赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = pygame.sprite.Sprite()</span><br><span class="line">s.image = pygame.transform.scale(pygame.image.load(<span class="string">&#x27;A.png&#x27;</span>),(<span class="number">350</span>,<span class="number">350</span>))</span><br><span class="line">s.rect = pygame.Rect(<span class="number">300</span>,<span class="number">150</span>,<span class="number">350</span>,<span class="number">350</span>)</span><br><span class="line">    </span><br><span class="line">c = pygame.sprite.Sprite()</span><br><span class="line">c.image = pygame.transform.scale(pygame.image.load(<span class="string">&#x27;B.png&#x27;</span>),(<span class="number">200</span>,<span class="number">200</span>))</span><br><span class="line">c.rect = pygame.Rect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>碰撞检测</p><ul><li><p>矩形碰撞检测<br>sp1、sp2分别是两个Sprite精灵<br>如果返回1为碰撞,0为没有碰撞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pygame.sprite.collide_rect(sp1,sp2)</span><br></pre></td></tr></table></figure></li><li><p>外接圆碰撞检测<br>sp1、sp2分别是两个Sprite精灵<br>如果返回True为碰撞，False为没有碰撞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pygame.sprite.collide_circle(sp1,sp2)</span><br></pre></td></tr></table></figure></li><li><p>Mask像素碰撞(精细碰撞)<br>sp1、sp2分别是两个Sprite精灵<br>如果返回None为不碰撞，返回一个元组为碰撞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pygame.sprite.collide_mask(sp1,sp2)</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在上一篇文章中，我介绍了Mask遮罩，其实，这个Sprite精灵只是对它的封装，当然Sprite可不止只有这个功能，<br>他的原来就是检测两个图案非透明部分有多上像素重叠，所以在物体1和物体2之间的碰撞难免还是会因为两个像素仅仅”接壤”而没有判断碰撞，但对比rect碰撞已经好了很多了</p></li></ul></li></ul><h2 id="Pygame演示"><a href="#Pygame演示" class="headerlink" title="Pygame演示"></a>Pygame演示</h2><ul><li><strong>这里是三种方式的对比，可见：外接圆碰撞精度&gt;矩形碰撞&gt;精细碰撞</strong><br><img src="https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/20_19_20_52_Sprite%E4%BA%8B%E4%BE%8B%E7%A2%B0%E6%92%9E.png" alt="alt 加载失败"></li><li><a href="https://code.xueersi.com/home/project/detail?lang=code&pid=36709123&version=offline&form=python&langType=python">原链接已开源</a></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当然Sprite的功能远不止这些，这其实是pygame的一个游戏角色群的处理类，功能还是有非常之多的</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Python </category>
          
          <category> Pygame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pygame </tag>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pygame用Mask实现精细碰撞</title>
      <link href="/2022/08/19/Pygame%E7%94%A8Mask%E5%AE%9E%E7%8E%B0%E7%B2%BE%E7%BB%86%E7%A2%B0%E6%92%9E/"/>
      <url>/2022/08/19/Pygame%E7%94%A8Mask%E5%AE%9E%E7%8E%B0%E7%B2%BE%E7%BB%86%E7%A2%B0%E6%92%9E/</url>
      
        <content type="html"><![CDATA[<p>如果你有Pygame有一定的基础，并用过Pygame编写过游戏那么你一定有一个烦恼那就是当两个图像碰撞检测时，往往采用的是矩形碰撞检测，这样就会导致，两个图案实际上还没有碰到，Pygame就识别为碰到了</p><p>而Pygame中的Mask(遮罩)模块就是解决这个问题很好的方法，我们把这种用Mask实现碰撞检测的方法叫做精细碰撞，当然，这篇文章中实现的是背景色为透明度图片，而并非白色</p><span id="more"></span><h2 id="Pygame-Mask模块实现精细碰撞"><a href="#Pygame-Mask模块实现精细碰撞" class="headerlink" title="Pygame.Mask模块实现精细碰撞"></a>Pygame.Mask模块实现精细碰撞</h2><h3 id="分步骤实现"><a href="#分步骤实现" class="headerlink" title="分步骤实现"></a>分步骤实现</h3><ul><li><p>创建发生碰撞的图片对象和矩形</p><ul><li><p>参数讲解:<br>这里的Rect函数中的参数分别为x、y坐标，和长、宽<br>pygame.transform.scale(pygame.image.load(“gib.png”),(200,200))：这是改变图片gib.png大小为200*200</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">big = pygame.transform.scale(pygame.image.load(<span class="string">&quot;gib.png&quot;</span>),(<span class="number">200</span>,<span class="number">200</span>))</span><br><span class="line">small = pygame.transform.scale(pygame.image.load(<span class="string">&quot;mal.png&quot;</span>),(<span class="number">100</span>,<span class="number">100</span>))</span><br><span class="line">rectbig=pygame.Rect(<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">rectsmall=pygame.Rect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建发生碰撞的图片对象所对应的遮罩</p><ul><li><p>参数讲解:<br>这里的big和small都是一个图片的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">maskbig&#x3D;pygame.mask.from_surface(big)</span><br><span class="line">masksmall&#x3D;pygame.mask.from_surface(small)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Mask遮罩碰撞检测</p><ul><li><p>参数讲解<br>maskA和maskB都是两个遮罩<br>其中offset是一个元组，格式如下：(maskB的x坐标.-maskA的x坐标,maskB的y坐标-maskA的y坐标)<br>这里元组的两个元素应该都是整形，所以如果坐标是小数的话请使用int()函数转为整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maskA.overlap(maskB,offset)</span><br></pre></td></tr></table></figure></li><li><p>参数讲解<br>maskA.overlap(maskA,offset)：这个函数是检测mask遮罩碰撞的函数<br>如果返回值为None表示没有碰撞，否则返回一个元组，所以这边用!=None表示已经碰撞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> masksmall.overlap(maskbig,offset)!=<span class="literal">None</span>: <span class="comment"># 已经碰撞</span></span><br><span class="line">    <span class="built_in">print</span>(masksmall.overlap(maskbig,offset))</span><br></pre></td></tr></table></figure></li><li><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">offset&#x3D;(int(200-sx),int(200-sy))</span><br><span class="line">if masksmall.overlap(maskbig,offset)!&#x3D;None: # 已经碰撞</span><br><span class="line">    print(masksmall.overlap(maskbig,offset))</span><br><span class="line">else: #没有碰撞</span><br><span class="line">    print(&quot;NO-Collide&quot;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Pygame做一个演示"><a href="#Pygame做一个演示" class="headerlink" title="Pygame做一个演示"></a>Pygame做一个演示</h3><ul><li>Mask碰撞检测和矩形碰撞的比较<br>  这里我在使用Mask方法检测出没有碰撞的同时，检测用常规方法是否碰撞<br>  <img src="https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/19_22_11_35_MaskRect%E5%AE%9E%E4%BE%8B.png" alt="alt 加载失败"><br>  <a href="https://code.xueersi.com/home/project/detail?lang=code&pid=36703416&version=offline&form=python&langType=python">代码原链接：C站</a></li><li>结论<br>  从图中我们明显发现这位清洁工阿姨很明显没有碰到小怪物，在Mask方法中是没有碰撞的即为：Mask:NO<br>  但是在Mask：NO的同时用普通的矩形检测确实相撞的，这说明确实Mask遮罩是有用的</li></ul><h2 id="Mask的其他函数"><a href="#Mask的其他函数" class="headerlink" title="Mask的其他函数"></a>Mask的其他函数</h2><ul><li>返回Mask的大小 <code>pygame.maskA.Mask.get_size() </code></li><li>Mask 重叠的像素数量 pygame.maskA.Mask.overlap_area(othermask, offset) </li><li>更多函数请自行查阅</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实Mask的功能还有很多，而Pygame实现精准碰撞也不止这一种，以后会有第二篇精准碰撞的文章，敬请期待！</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Python </category>
          
          <category> Pygame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pygame </tag>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈与队列</title>
      <link href="/2022/08/14/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
      <url>/2022/08/14/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>栈和队列是非常常用的数据结构，可以解决很多问题</p></li><li><p>栈：先进后出 ； 队列：先进先出 ，这就是它们的最大特点</p></li><li><p>本篇文章我将介绍Python和C++中的栈与队列，以及它们的基本操作</p><span id="more"></span></li></ul><h4 id="栈-stack"><a href="#栈-stack" class="headerlink" title="栈(stack)"></a>栈(stack)</h4><ul><li>栈(stack)，又名堆栈，是一种先进后出的数据结构</li><li>典型应用：后缀表达式的求值、括号匹配问题</li></ul><h4 id="栈的操作："><a href="#栈的操作：" class="headerlink" title="栈的操作："></a>栈的操作：</h4><ul><li>入栈：push(content)</li><li>出栈：pop()</li><li>获取栈顶元素：top()</li><li>栈的大小：size()</li><li>栈是否为空： empty()</li><li>下面是leetcode官网的动图<br><img src="https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_0_%E5%87%BA%E5%85%A5%E6%A0%88.gif" alt="加载错误"></li></ul><h4 id="Python实现栈"><a href="#Python实现栈" class="headerlink" title="Python实现栈"></a>Python实现栈</h4><p>在C++的STL中有封装好的栈，但是Python没有，以下是Python我封装的栈的类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__array = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self,content</span>):</span></span><br><span class="line">        self.__array.append(content)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.__array)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__array[self.size()-<span class="number">1</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">del</span> self.__array[self.size()-<span class="number">1</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span>(self.size()&lt;=<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">out</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.__array)):</span><br><span class="line">            <span class="built_in">print</span>(self.__array[i],end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="C-STL-栈"><a href="#C-STL-栈" class="headerlink" title="C++.STL-栈"></a>C++.STL-栈</h4><ul><li><p>执行以下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  queue&lt;<span class="keyword">int</span>&gt; mqu;</span><br><span class="line">  mqu.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">  mqu.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">  mqu.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">  mqu.<span class="built_in">pop</span>();</span><br><span class="line">  cout &lt;&lt; mqu.<span class="built_in">top</span>()&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; mqu.<span class="built_in">size</span>() &lt;&lt; endl ;</span><br><span class="line">  mqu.<span class="built_in">pop</span>();</span><br><span class="line">  mqu.<span class="built_in">pop</span>();</span><br><span class="line">  cout &lt;&lt; mqu.<span class="built_in">empty</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 2 true</span><br></pre></td></tr></table></figure><h4 id="后缀表达式的求值"><a href="#后缀表达式的求值" class="headerlink" title="后缀表达式的求值"></a>后缀表达式的求值</h4></li><li><p>后缀表达式：把运算符后置的表达式</p></li><li><p>中缀表达式：1+2+3</p></li><li><p>优点：方便计算机识别计算，可以省略括号</p></li><li><p>栗子：545*+5/ 它以中缀表达式是这样表达的： (5+4*5)/5</p></li><li><p>C++代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Evaluate postfix expression</span></span><br><span class="line"><span class="comment">82/       128*+     545*+5/</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">stack&lt;<span class="keyword">int</span>&gt; mst;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postFixEvaluation</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(s.<span class="built_in">at</span>(i)&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s.<span class="built_in">at</span>(i)&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">          mst.<span class="built_in">push</span>((<span class="keyword">int</span>)(s.<span class="built_in">at</span>(i)-<span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">int</span> num2 = mst.<span class="built_in">top</span>();</span><br><span class="line">          mst.<span class="built_in">pop</span>();</span><br><span class="line">          <span class="keyword">int</span> num1 = mst.<span class="built_in">top</span>();</span><br><span class="line">          mst.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(s.<span class="built_in">at</span>(i)==<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">              mst.<span class="built_in">push</span>(num1+num2);</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(s.<span class="built_in">at</span>(i)==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">              mst.<span class="built_in">push</span>(num1-num2);</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(s.<span class="built_in">at</span>(i)==<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">              mst.<span class="built_in">push</span>(num1*num2);</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(s.<span class="built_in">at</span>(i)==<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">              mst.<span class="built_in">push</span>(num1/num2);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  string s=<span class="string">&quot;128*+&quot;</span>;</span><br><span class="line">  <span class="built_in">postFixEvaluation</span>(s);</span><br><span class="line">  cout &lt;&lt; mst.<span class="built_in">top</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>():</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">      self.__array = []</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self,content</span>):</span></span><br><span class="line">      self.__array.append(content)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">len</span>(self.__array)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">top</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="keyword">return</span> self.__array[self.size()-<span class="number">1</span>]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="keyword">del</span> self.__array[self.size()-<span class="number">1</span>]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">empty</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="keyword">if</span>(self.size()&lt;=<span class="number">0</span>):</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">out</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.__array)):</span><br><span class="line">          <span class="built_in">print</span>(self.__array[i],end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">s=<span class="string">&quot;545*+5/&quot;</span></span><br><span class="line">mst=Stack()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">ord</span>(s[i])&gt;=<span class="built_in">ord</span>(<span class="string">&quot;0&quot;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(s[i])&lt;=<span class="built_in">ord</span>(<span class="string">&quot;9&quot;</span>):</span><br><span class="line">      mst.push(<span class="built_in">ord</span>(s[i])-<span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">      num2 = mst.top();</span><br><span class="line">      mst.pop();</span><br><span class="line">      num1 = mst.top();</span><br><span class="line">      mst.pop();</span><br><span class="line">      <span class="keyword">if</span> s[i]==<span class="string">&#x27;+&#x27;</span> :</span><br><span class="line">          mst.push(num1+num2);</span><br><span class="line">      <span class="keyword">elif</span> s[i]==<span class="string">&#x27;-&#x27;</span> :</span><br><span class="line">          mst.push(num1-num2);</span><br><span class="line">      <span class="keyword">elif</span> s[i]==<span class="string">&#x27;*&#x27;</span> :</span><br><span class="line">          mst.push(num1*num2);</span><br><span class="line">      <span class="keyword">elif</span> s[i]==<span class="string">&#x27;/&#x27;</span> :</span><br><span class="line">          mst.push(num1/num2);</span><br><span class="line"><span class="built_in">print</span>(mst.top())    </span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h4><ul><li><p>队列(Queue)，又名堆栈，是一种先进先出的数据结构</p></li><li><p>典型应用：迷宫问题、最短路径、岛屿问题等</p><h4 id="队列的操作："><a href="#队列的操作：" class="headerlink" title="队列的操作："></a>队列的操作：</h4></li><li><p>入队：push(content)</p></li><li><p>出队：pop()</p></li><li><p>获取队顶元素：front()//最先进队的</p></li><li><p>获取队头元素：back()//最后进队的</p></li><li><p>队列的大小：size()</p></li><li><p>队列是否为空： empty()</p></li><li><p>下面是leetcode官网的动图<br><img src="https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_0_%E5%87%BA%E5%85%A5%E9%98%9F.gif" alt="加载错误"></p><h4 id="Python实现队列"><a href="#Python实现队列" class="headerlink" title="Python实现队列"></a>Python实现队列</h4><p>在C++的STL中有封装好的栈，但是Python没有，以下是Python我封装的栈的类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>():</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">      self.__array = []</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self,content</span>):</span></span><br><span class="line">      self.__array.append(content)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">len</span>(self.__array)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.size()-<span class="number">1</span>):</span><br><span class="line">          self.__array[i]=self.__array[i+<span class="number">1</span>]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">front</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="keyword">return</span> self.__array[<span class="number">0</span>]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">back</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="keyword">return</span> self.__array[self.size()-<span class="number">1</span>]</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">empty</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="keyword">if</span> self.size()&lt;=<span class="number">0</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">out</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.size()):</span><br><span class="line">          <span class="built_in">print</span>(self.__array[i],end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>) </span><br></pre></td></tr></table></figure><h4 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h4><p>1为可以走 0为不可以走<br>问从列表的[0,0]走到[n,n]最少需要多少步，只能走上下左右</p></li><li><p>Python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Queue</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__array = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self,content</span>):</span></span><br><span class="line">        self.__array.append(content)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.__array)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.size()-<span class="number">1</span>):</span><br><span class="line">            self.__array[i]=self.__array[i+<span class="number">1</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">front</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__array[<span class="number">0</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">back</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__array[self.size()-<span class="number">1</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.size()&lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">out</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.size()):</span><br><span class="line">            <span class="built_in">print</span>(self.__array[i],end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>) </span><br><span class="line">  info=[</span><br><span class="line">    [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">  ]</span><br><span class="line">  r,c=<span class="number">4</span>,<span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wayx,wayy = [<span class="number">0</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],[-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">mqu=Queue()</span><br><span class="line"></span><br><span class="line">mqu.push([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">info[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">isFind=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> mqu.empty()==<span class="number">0</span> <span class="keyword">and</span> isFind!=<span class="literal">True</span>:</span><br><span class="line">    top=mqu.front()</span><br><span class="line">    mqu.pop()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        nx = top[<span class="number">0</span>]+ wayx[i]</span><br><span class="line">        ny = top[<span class="number">1</span>]+ wayy[i]</span><br><span class="line">        <span class="keyword">if</span> nx &gt;= <span class="number">0</span> <span class="keyword">and</span> nx &lt;= r <span class="keyword">and</span> ny &gt;= <span class="number">0</span> <span class="keyword">and</span> ny &lt;= c <span class="keyword">and</span> info[nx][ny]==<span class="number">1</span>:</span><br><span class="line">            mqu.push([nx,ny,top[<span class="number">2</span>]+<span class="number">1</span>])</span><br><span class="line">            info[nx][ny] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> nx == r <span class="keyword">and</span> ny == c:</span><br><span class="line">                <span class="built_in">print</span>(top[<span class="number">2</span>]+<span class="number">1</span>)</span><br><span class="line">                isFind=<span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> isFind==<span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Can&#x27;t find anyway&quot;</span>)            </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> C++ </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Code </tag>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vercel+Github搭建Hexo博客</title>
      <link href="/2022/08/13/Vercel-Github%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/08/13/Vercel-Github%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>github是一个代码托管平台，缺点是加载的时候特别慢</li><li>vercel完美结局了这个问题，vercel加载速度相对快一些，可以和github绑定，而且根据github储存库实时拉取更新</li><li>Hexo一个快速、简洁且高效的博客框架,它支持几条简短的命令发布博客,因此是对于初学者比较友好的博客框架</li></ul><span id="more"></span><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li><p>github账号、vercel账号</p></li><li><p>nodejs v12版本以上 、 git</p><blockquote><p>网站官网：</p><blockquote><p><a href="https://github.com/">github官网</a>、<a href="https://vercel.com/">vercel官网</a><br><a href="https://git-scm.com/">git官网</a>、<a href="https://nodejs.org/en/">nodejs官网</a></p></blockquote></blockquote></li></ul><hr><h3 id="创建Vercel项目并拉取"><a href="#创建Vercel项目并拉取" class="headerlink" title="创建Vercel项目并拉取"></a>创建Vercel项目并拉取</h3><ol><li>首先进vercel官网，点击 New Project 按钮，然后点击 Browse All Templates 按钮 找到Hexo主题然后 修改项目名 把下面那个框勾掉（那个是创建私有储存库），然后你的github里会自动生成一个项目</li><li>配置git :<ul><li><p>打开git-bush 输入ssh-keygen -t rsa -C ““ 连续 3 次回车，最终会在用户目录下生成个包含公钥私钥等数据的目录 ( 一般是 C:/Users//.ssh/ ) 将刚复制的内容粘贴到 Key(你的github-&gt;setting-&gt;SSH) 中，Title 随便写一个，点击保存 ( Add SSH Key ) </p></li><li><p>运行下方命令 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;&#123;&#123;你的 GitHub username&#125;&#125;&quot;</span><br><span class="line">git config --global user.email &quot;&#123;&#123;你的 GitHub 注册邮箱地址&#125;&#125;&quot;</span><br><span class="line">ssh -T git@github.com # 邮箱地址不用改 如果提示 Are you sure you want to continue connecting (yes&#x2F;no)? 请输入 yes 并回车。</span><br></pre></td></tr></table></figure></li></ul></li><li>在本地选一个文件夹 打开git-bash 运行：git clone <a href="https://github.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D%E7%A7%B0">https://github.com/用户名/仓库名称</a></li></ol><hr><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><ol><li>首先打开<a href="https://hexo.io/themes/">hexo官网</a> 挑选一个心仪的主题 ，单击图片可以预览网页，点下面文字到github仓库<br><strong>注意：不要选择indigo这个主题，这个主题有漏洞，配置起来很麻烦，有些主题预览不了的尽量不要选，避免一会的麻烦（作者一开始选的就是indigo）</strong></li><li>到仓库之后 在主文件夹打开git-bash 然后输入 git clone 你刚才的主题的仓库的网址 themes/主题名</li><li>打开主项目下的 _config.yml 文件 把 theme：lanspace 改为 theme:你的主题名 然后进到 themes文件夹里把landspace文件夹删了（也可以不删）</li></ol><hr><h3 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h3><p><strong>注意：这一步需要有较好的英文功底</strong></p><ol><li><p>进入 打开主项目下的 _config.yml 文件  修改<br> <strong>注意：这里冒号后面有空格 我之前就是应为这个找半天不知道报错在哪</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: 标题</span><br><span class="line">subtitle: 你的个性签名</span><br><span class="line">author: 你的名字</span><br><span class="line">language: zh-CN</span><br><span class="line"># URL</span><br><span class="line">url: 这里写你vercel预览的网址，我这边是：https:&#x2F;&#x2F;yzx-blog.vercel.app&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>进入你的主题文件夹里面的 _config.yml 文件 修改各项属性 由于每个主题各有不同 大家可以在网上搜索教程</p></li></ol><hr><h3 id="生成网页"><a href="#生成网页" class="headerlink" title="生成网页"></a>生成网页</h3><ol><li><p>万事俱备后再在（这一步其实应该提前做的）<br> cmd运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo </span><br></pre></td></tr></table></figure><p> 主目录运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo </span><br><span class="line">npm install hexo-cli --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p> 这是在搭建hexo环境</p></li><li><p>生成网页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p> hexo s之后会在<a href="http://localhost:4000/%E6%98%BE%E7%A4%BA%E4%BD%A0%E7%9A%84%E7%BD%91%E9%A1%B5">http://localhost:4000/显示你的网页</a> 如果这个时候你成功了那么就可以提交到github了</p><p> <strong>可能的报错：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: RPC failed； curl 28 OpenSSL SSL_read: Connection was reset, errno 10054 fatal: expected</span><br></pre></td></tr></table></figure><p> <strong>解决办法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="提交并成功部署博客"><a href="#提交并成功部署博客" class="headerlink" title="提交并成功部署博客"></a>提交并成功部署博客</h3><ol><li><p>主文件夹打开git-bush</p></li><li><p>运行:以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br><span class="line">git remote 你vercel生成的那个github仓库网址</span><br><span class="line">git add .（可能要尝试两次）</span><br><span class="line">git commit -m &quot;提交的备注&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><ol><li>运行 hexo new “文章名”</li><li>在提示的目录打开文件使用markdown语法编辑 具体教程看<a href="https://www.runoob.com/markdown/md-tutorial.html">markdown教程用法</a>转自菜鸟教程</li><li>之后 clean g s三件套 再来一遍再提交就OK了</li></ol><hr><h3 id="归档、分类里面是报错的"><a href="#归档、分类里面是报错的" class="headerlink" title="归档、分类里面是报错的"></a>归档、分类里面是报错的</h3><ol><li>检查一下你的yml配置文件</li><li>按照这个<a href="https://blog.csdn.net/weixin_48927364/article/details/123295436">教程</a>走</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
          <category> Html </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
            <tag> Html </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客搭建成功</title>
      <link href="/2022/08/13/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F/"/>
      <url>/2022/08/13/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F/</url>
      
        <content type="html"><![CDATA[<p>个人博客已搭建完成了，后续发布，敬请关注。</p><p> 特此鸣谢C站吴宇航对我搭建博客的帮助 ：<a href="https://wyh-blog.vercel.app/">https://wyh-blog.vercel.app/</a></p>]]></content>
      
      
      <categories>
          
          <category> 公告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/avatar.gif","path":"img/avatar.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/ico.png","path":"img/ico.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"35340303c11281cea12adfaf8cf31f84fe8373e6","modified":1662812607733},{"_id":"source/_posts/Python常见报错代码.md","hash":"400e2e562c5bbdd8812efb93f7e82f1ffdce889d","modified":1662462360666},{"_id":"source/_posts/Sprite精灵实现Pygame矩形、圆形、精细碰撞.md","hash":"717151a902dac8939fff9858662f4af8c03cd2c2","modified":1662181857205},{"_id":"source/_posts/博客变更通知.md","hash":"90047173bfe4ed61efe29d00b21a360acd59f9aa","modified":1662814612932},{"_id":"source/categories/index.md","hash":"f25bedbfebe2292232ae5290e0b86c52867755c2","modified":1662812120777},{"_id":"source/_posts/Pygame用Mask实现精细碰撞.md","hash":"5e54abd6111978242ec726022f4c6276544ad20c","modified":1662462329725},{"_id":"source/_posts/我的博客搭建成功.md","hash":"34568f2312fab121afd989672f82432818d60696","modified":1662181883845},{"_id":"source/_posts/requests详解(1).md","hash":"372301e8abeae945c4d6a74bf5fe6cb99375fd58","modified":1662462347238},{"_id":"source/_posts/Vercel-Github搭建Hexo博客.md","hash":"a03039e0b93a8f5975ad98e50435fa6b4432b6f3","modified":1662814201075},{"_id":"source/_posts/栈与队列.md","hash":"f8cf49f620b4c1a2c5c008cf871b05d41495340e","modified":1662188670829},{"_id":"source/tags/index.md","hash":"3e966e7dd86273bd25c9948c87d80d3ad14b0b45","modified":1662812147160},{"_id":"source/link/index.md","hash":"cbc7a17a8c9f38b6c58d07ddf5ad1f476e0cb78e","modified":1662813228924},{"_id":"source/example/hello-world.md","hash":"5a8c977e4e92ea1bea29e34e9f1201315d94b02d","modified":1662796637592},{"_id":"themes/butterfly/_config.yml","hash":"d025be96ba07ee2dec2ba7bd5d1c7d85432252fd","modified":1662860504310},{"_id":"themes/butterfly/package.json","hash":"f486e80389eb3f473401eabeecefb10d44fa2934","modified":1662860504385},{"_id":"themes/butterfly/plugins.yml","hash":"f00bfe96b803606afe4c746d30c8782305107f5c","modified":1662860504386},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1662860504314},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1662860504314},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1662860504382},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1662860504383},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1662860504384},{"_id":"themes/butterfly/languages/default.yml","hash":"335731ef259a3cec2499a2d5b050025ff4bdc608","modified":1662860504311},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"4adf079fb0170e3a8de6ddbb0392d6d1120030c4","modified":1662860504312},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1662860504385},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"dcb10d62249bb149af8ad78db3ee6e342c6d6be7","modified":1662860504313},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1662860504315},{"_id":"themes/butterfly/languages/en.yml","hash":"a96ab1bbe74e99ca2e4d67da9d83f442eb9b73af","modified":1662860504312},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"ddea99847fd41323f183cd0c9dae3174c586f5b3","modified":1662860504316},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1662860504317},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1d0f1b84be352862046e780800d696e80ef1cdd1","modified":1662860504317},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"3d95525a6d809be2f2a1cd6b33d3b7ecc0457d62","modified":1662860504327},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1662860504333},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"205562ec188bfba5686c51af77486550d0927df5","modified":1662860504335},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1662860504336},{"_id":"themes/butterfly/scripts/events/init.js","hash":"b3e05e3440b078f57391c113d6b0c8ecff112720","modified":1662860504389},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1662860504387},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"8e6f0677c190d44c64222054e2e7c065fc6c4802","modified":1662860504388},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"176332aa4d01728d0bd084e9b02c60167dc307dd","modified":1662860504388},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1662860504389},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"b92cc4648cfe5fb28c58943727823d1178b73a4a","modified":1662860504390},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1662860504396},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1662860504391},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"6c3b7d0874fa499800a4fd49894c481b05ec750c","modified":1662860504391},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1662860504396},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"6d4cd2393945a9316339351cab588265f5c18d73","modified":1662860504397},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1662860504398},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1662860504398},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1662860504398},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1662860504399},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1662860504400},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1662860504400},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1662860504401},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1662860504392},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"c445140fa16f19bf5fb617fa735504e7799d4d42","modified":1662860504394},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"db4f5971c27f49a4cb47d34729f4ddf9919d392b","modified":1662860504393},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1662860504393},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"83bfb16ab8d440be04e1b1f889f6affa7ad65a67","modified":1662860504395},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c07efb04120914363b8de2c276ac5783b82db776","modified":1662860504394},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1662860504424},{"_id":"themes/butterfly/source/css/var.styl","hash":"63f12a6a847738b1479ce782c8caac5e0cf16a6b","modified":1662860504424},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1662860504308},{"_id":"themes/butterfly/README.md","hash":"851d8e3e0ba8d9da305eb2f2ec63221296c04080","modified":1662860504308},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1662724264881},{"_id":"themes/butterfly/README_CN.md","hash":"c03bd24e375f0f9bbc4238d0ee9bae7f4db2f032","modified":1662860504309},{"_id":"themes/butterfly/source/js/main.js","hash":"872689f7323853ff4dda446dbe0f4ac2dec21e33","modified":1662860504427},{"_id":"themes/butterfly/source/js/utils.js","hash":"fdb9e5b38f076953a2431b8f682388b030694b55","modified":1662860504429},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1662860504318},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"61747d33225ae2184ed94f1cb7ce74d76b3ecc18","modified":1662860504319},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1662860504320},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c1e45d4d0bd905ddcd2282de4fe89be92e67847d","modified":1662860504319},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1662860504320},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1662724264881},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fc3e67e5ae4774d9e89964ba96beed28f34ee8f0","modified":1662860504322},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1662860504321},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1662860504323},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"6f489b24f06578440f18b629db56c810f00f8c3f","modified":1662860504324},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1662724264882},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1662860504322},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"a9e56b1c41bf327859b0a7bcb8e72b458bd851b2","modified":1662860504325},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1662860504326},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1662860504324},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1662860504328},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1662860504429},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1662860504326},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1662860504330},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1662860504331},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"8b8e04d3d9462b3790ba17e5a865dab5a4740a73","modified":1662860504330},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1662860504332},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1662860504329},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"8f43fdeaf8cff4a35bab74b48c963786ca015620","modified":1662860504333},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1662860504335},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1662860504337},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"ea89ca7bb18dc3059079709ee5b6e971a8b87c50","modified":1662860504332},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1662860504334},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1662860504357},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1662860504366},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1662860504367},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"4e026840c915327e45331e63e4b7ef287e871204","modified":1662860504366},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1662860504375},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d561d36229692e2c8a9ee45a7c24c0c2b3599170","modified":1662860504374},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1662860504375},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1662860504376},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1662860504378},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"08641633d38903351a7424baf9893d9038ba057d","modified":1662860504376},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1662860504377},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1662860504379},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1662860504378},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1662860504378},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1662860504380},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1662860504380},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1662860504381},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"5e0e9e9b2cd3c256d52423e2278e790aa387a53a","modified":1662860504382},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"b9d7d23dc8810542b8c8ffcbfbd3694318debcc6","modified":1662860504403},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f562648de515abc873609bfe9b9f799c8cf42b72","modified":1662860504402},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"af6e3357b8f6df18d0775b8352551c0f8ce38e55","modified":1662860504408},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1662860504404},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1662860504407},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1662860504409},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1662860504409},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"e931ef81754a7b9d999fa23d134c620e68e75491","modified":1662860504409},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"844858ae87c7278996ce484c6b456db354c48764","modified":1662860504410},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"612d2f8a53141b353078f2a3405d8d44a79d9558","modified":1662860504410},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1662860504411},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"b0ba6f72848bc711bcf534c56b04ae14ab21b320","modified":1662860504411},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1662860504412},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"e02b52bdd337c0ed3c9d3a507d1011403c38881d","modified":1662860504414},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"1c1c585ba99cb4004956b5e98fc044260b456f99","modified":1662860504413},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1662860504412},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1662860504413},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"d72218cb5a6bfe048ae1c92009bd815a08a53d3a","modified":1662860504417},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1662860504417},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1662860504416},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1662860504417},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"6d2a841c7656fb28b1e15afe1d7dda56c424b7d7","modified":1662860504418},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1662860504418},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1662860504420},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1662860504418},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1662860504422},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1662860504421},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"84c42716e833d2d1dd47195ea996803ffa0e58ec","modified":1662860504421},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1662860504422},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1662860504423},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1662860504423},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1662860504422},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"45792c13c7c439d412b7dc597d74d24f3b598406","modified":1662860504420},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1662860504423},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1662860504419},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"5dabc3a5330cc28f0666d1cd8db0d67f553fd854","modified":1662860504415},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1662860504424},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"1fed25162d7204480e9bcf476b3246e1717107ca","modified":1662860504415},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1662860504338},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"f72e002d56903a49c36174e77e42f88b8af8bd44","modified":1662860504428},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1662860504339},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d1398399eb7f1cc004fbcefa18f56188cc8fec8c","modified":1662860504419},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"dfbec0a99e38ebeac46931121b3a70b9a1e34b79","modified":1662860504340},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1662860504340},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1662860504341},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1662860504344},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1662860504341},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"d0d60008ef4ff74298ff062878766f194a2e4a70","modified":1662860504428},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1662860504344},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"6e5ccc9ea4346c71ad4cbf1e9f1cb83bb45e6f27","modified":1662860504342},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1662860504342},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1662860504345},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1662860504345},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"a5ddcf84ce8855c7801289270009e29c3a103150","modified":1662860504346},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1662860504347},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"55f7c144e4ef7a7f317bcdab8044fd8f89bdd5d9","modified":1662860504348},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e657b87b721b6ef9149686630a205f4ebb7f2716","modified":1662860504346},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1662860504349},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1662860504351},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"8c16214a610ff8087628f32d005a1b0aab3bb910","modified":1662860504350},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"c83f37e9618fbc03ecab25db54f14dbbf9e7ce10","modified":1662860504350},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"3df2f59c9552a1f2e6f0d50c4ae97e72c5392b59","modified":1662860504352},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1662860504352},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1662860504353},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1662860504354},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1662860504354},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1662860504355},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1662860504355},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e45152e4ebc3fb2462916be93f98d18f0574f2d3","modified":1662860504356},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1662860504356},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1662860504358},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1662860504358},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"056756e43908519039b8bbd7a90f8c49d561eb52","modified":1662860504359},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1662860504359},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"77ac27a24b8347668c4df9d5c44c9461c69eaec9","modified":1662860504361},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1662860504361},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1662860504362},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1662860504362},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1662860504364},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1662860504363},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1662860504365},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1662860504372},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"63ef0b2a75cf26a94c5bcd885f3a1c144451b852","modified":1662860504365},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1662860504372},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1662860504370},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"b45fc15c3ae7db3a0fbce0d6da74a72a95ca8a2b","modified":1662860504373},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1662860504405},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1662860504369},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3b5ef84744a1a8fec5a63554079008040d96f924","modified":1662860504369},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"af5d3d87b736598dafcf5871863596592cacdfe1","modified":1662860504368},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1662860504405},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1662860504406},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1662860504406},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1662860504407},{"_id":"themes/butterfly/source/img/ico.png","hash":"79b119fab1c86045dc23826b585e09c55c0c8a5d","modified":1662814010275},{"_id":"themes/butterfly/source/img/avatar.gif","hash":"fad6c7bfe4f0610130cc1401b6ed3dfce48f7dc6","modified":1661695922523},{"_id":"public/search.xml","hash":"c6cb978e44b8f3c63195206dcef46994f6539fd2","modified":1662950702019},{"_id":"public/link/index.html","hash":"971f499f9917a4f61a5ed3e796e423ae4cc3ed70","modified":1662950702019},{"_id":"public/categories/index.html","hash":"60823474a5057a5fd06aec2313147aaadc5c71e1","modified":1662950702019},{"_id":"public/tags/index.html","hash":"dcdba672d6ad51bf3dbcd6bbf38d8c0083b264f9","modified":1662950702019},{"_id":"public/about/index.html","hash":"92d63e320cf84501e6c1353fe2db56ee57a5f2c6","modified":1662950702019},{"_id":"public/example/hello-world.html","hash":"f76484b5a2500faf3bdef4c7fb959a79eec46ae6","modified":1662950702019},{"_id":"public/2022/09/10/博客变更通知/index.html","hash":"a090d70932a82482744be70a28c283a074a61ebc","modified":1662950702019},{"_id":"public/2022/09/03/requests详解(1)/index.html","hash":"3e87c52a7d8edc07e22a9dd163175da188a48f6f","modified":1662950702019},{"_id":"public/2022/08/29/Python常见报错代码/index.html","hash":"954bf5f89c0eb517bb20d39504be4cef1ddaf69e","modified":1662950702019},{"_id":"public/2022/08/20/Sprite精灵实现Pygame矩形、圆形、精细碰撞/index.html","hash":"ccbbb1373f6c9ee6134442dfe3f4a81c2d88ea51","modified":1662950702019},{"_id":"public/2022/08/19/Pygame用Mask实现精细碰撞/index.html","hash":"ab71f7d2200816fe16da7ae9a3182d41b7d6a262","modified":1662950702019},{"_id":"public/2022/08/14/栈与队列/index.html","hash":"93918a97d3dac4450eb1b63137d5273d906fa51a","modified":1662950702019},{"_id":"public/2022/08/13/Vercel-Github搭建Hexo博客/index.html","hash":"63f2a7818059000d6609d14c2d00921c883bfcb6","modified":1662950702019},{"_id":"public/2022/08/13/我的博客搭建成功/index.html","hash":"568979dd0912106a27e2e316f43751b41279e70c","modified":1662950702019},{"_id":"public/categories/Code/index.html","hash":"7f3f8d5a8de2e82800bc1d08bfeb27c9ca02bedb","modified":1662950702019},{"_id":"public/categories/Code/Html/index.html","hash":"26a7b8545c5ad34cef626fc788744667b160b701","modified":1662950702019},{"_id":"public/categories/Code/Python/index.html","hash":"90e7720428f72d91c320a3972eaeb00d80ab9252","modified":1662950702019},{"_id":"public/categories/公告/index.html","hash":"629b8222c8f8e36934d393f9800f7a0671b13975","modified":1662950702019},{"_id":"public/categories/Code/C/index.html","hash":"a809c20a7373a1e067e7398e268b0aa1631b4f0d","modified":1662950702019},{"_id":"public/categories/Code/Html/博客/index.html","hash":"71b07bce6a6dd9234119cf7b12a2665412a6cf09","modified":1662950702019},{"_id":"public/categories/Code/Python/Pygame/index.html","hash":"396d8ffce9b1380401dd539776374394e09e7a22","modified":1662950702019},{"_id":"public/categories/Code/Python/类库/index.html","hash":"0abb46c6d4540f402c5b5a44e2c8f9e1d8d9714b","modified":1662950702019},{"_id":"public/categories/Code/Python/Python小技巧/index.html","hash":"edcc68e24b1f0dbd891395468c15a06ef6fabefc","modified":1662950702019},{"_id":"public/categories/Code/C/数据结构/index.html","hash":"bd0f564c87910a0f5e3276c60055e4418f07c104","modified":1662950702019},{"_id":"public/categories/Code/Python/类库/Spider爬虫/index.html","hash":"26a592404190acf7cfb002ee40e2480ff0fe24ca","modified":1662950702019},{"_id":"public/index.html","hash":"a3765b836a83f2715a86534346ad3190d06c5596","modified":1662950702019},{"_id":"public/categories/Code/Python/类库/Spider爬虫/requests/index.html","hash":"0a57c95fa2943798a6123fcd4659f760feba01ee","modified":1662950702019},{"_id":"public/tags/Python/index.html","hash":"dacfb68677fa70c570045cdb2ff987fbbc8a5fdb","modified":1662950702019},{"_id":"public/tags/Pygame/index.html","hash":"739ba917c921b30ce08cc6a9de9ae069ac973b7a","modified":1662950702019},{"_id":"public/tags/Code/index.html","hash":"d448440e649feeafde90978f94e06f29fae21dd4","modified":1662950702019},{"_id":"public/tags/Html/index.html","hash":"58065e80e1c2d9c86e6dc28cc7ce263900e62858","modified":1662950702019},{"_id":"public/tags/博客/index.html","hash":"dc0525d727944a5b3da923cc696deebf1b603412","modified":1662950702019},{"_id":"public/tags/公告/index.html","hash":"ad93ed96babe8f87841dc659c666f5a6484884b6","modified":1662950702019},{"_id":"public/tags/Spider爬虫/index.html","hash":"4a059216ba6af25fb91861bf2f8b4f744fbda37f","modified":1662950702019},{"_id":"public/tags/类库/index.html","hash":"20843e4798eb968cad10d9cc6be239cd632c8acf","modified":1662950702019},{"_id":"public/tags/C/index.html","hash":"67ceebba97b7239652233eb97e6bf2b0a8ccce8a","modified":1662950702019},{"_id":"public/tags/数据结构/index.html","hash":"73ebaca6ab3fc810006e943703c654cc3a7be2c9","modified":1662950702019},{"_id":"public/archives/index.html","hash":"46c16ad48cf71c1eccc46258d5df96e7ed39c1e7","modified":1662950702019},{"_id":"public/archives/2022/index.html","hash":"135cad36d5dc258aa61915f7471699f414341b60","modified":1662950702019},{"_id":"public/archives/2022/08/index.html","hash":"e32a38d5e1ba017cd651d3fdf3eb9b5a357bfed5","modified":1662950702019},{"_id":"public/archives/2022/09/index.html","hash":"05af1e67cad959181da86a0edc6ca80ac56e4a78","modified":1662950702019},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1662950702019},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1662950702019},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1662950702019},{"_id":"public/img/ico.png","hash":"79b119fab1c86045dc23826b585e09c55c0c8a5d","modified":1662950702019},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662950702019},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1662950702019},{"_id":"public/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1662950702019},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1662950702019},{"_id":"public/js/main.js","hash":"14b09f54d0c87f3fff764cb67bf77b8854251f69","modified":1662950702019},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1662950702019},{"_id":"public/css/index.css","hash":"c6ab3089a5f847ccaa65cf353056cf3f01dee695","modified":1662950702019},{"_id":"public/img/avatar.gif","hash":"fad6c7bfe4f0610130cc1401b6ed3dfce48f7dc6","modified":1662950702019}],"Category":[{"name":"Code","_id":"cl7y5wuag0004eousfiby5zqm"},{"name":"Html","parent":"cl7y5wuag0004eousfiby5zqm","_id":"cl7y5wuaq000jeous593wbdag"},{"name":"Python","parent":"cl7y5wuag0004eousfiby5zqm","_id":"cl7y5wuar000meousgc3r1m5w"},{"name":"公告","_id":"cl7y5wuas000reous4d5q6t80"},{"name":"C++","parent":"cl7y5wuag0004eousfiby5zqm","_id":"cl7y5wuav0013eous2ej2hyon"},{"name":"博客","parent":"cl7y5wuaq000jeous593wbdag","_id":"cl7y5wuaw001aeousdyvu9160"},{"name":"Pygame","parent":"cl7y5wuar000meousgc3r1m5w","_id":"cl7y5wuaw001eeousb657btnf"},{"name":"类库","parent":"cl7y5wuar000meousgc3r1m5w","_id":"cl7y5wuax001heousbyzzhoe8"},{"name":"Python小技巧","parent":"cl7y5wuar000meousgc3r1m5w","_id":"cl7y5wuax001leous2g6gfhvq"},{"name":"数据结构","parent":"cl7y5wuav0013eous2ej2hyon","_id":"cl7y5wuay001seousfmidge5m"},{"name":"Spider爬虫","parent":"cl7y5wuax001heousbyzzhoe8","_id":"cl7y5wuaz0022eous78t67fjn"},{"name":"requests","parent":"cl7y5wuaz0022eous78t67fjn","_id":"cl7y5wub00029eous8u7cagv3"}],"Data":[],"Page":[{"title":"Categories分类","date":"2022-02-05T10:30:37.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"\n---\ntitle: Categories分类\ndate: 2022-02-05 18:30:37\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2022-09-10T12:15:20.777Z","path":"categories/index.html","comments":1,"_id":"cl7y5wua80000eous1n90gaa6","content":"","site":{"data":{}},"cover":"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/23_22_5_46_daily_pic.png","excerpt":"","more":""},{"title":"Link友链","date":"2022-09-09T16:00:00.000Z","_content":"# 关于作者\n+ [Xes-C站](https://code.xueersi.com/space/59842528)\n+ [Yzx's Blog 作者的博客](https://www.yzx-blog.tk/)\n+ [Bilibili](https://space.bilibili.com/1862585422)\n+ [Luogu洛谷](https://www.luogu.com.cn/user/676282)\n+ [Leetcode力扣](https://leetcode.cn/u/amazing-i3oydvax/)\n\n# 关于吴宇航\n+ [Wyh's Blog 吴宇航的博客](https://www.wuyuhang.ml/)\n+ [Xes-C站](https://code.xueersi.com/space/17025146)\n+ [Luogu洛谷](https://www.luogu.com.cn/user/690473)\n\n# 关于胡锦辉\n+ [Xes-C站](https://code.xueersi.com/space/2739759)\n+ [Bilibili](https://space.bilibili.com/1412286093)\n\n# 关于小轩\n+ [Xes-C站](https://code.xueersi.com/space/12907647)\n+ [Bilibili](https://space.bilibili.com/418073971)\n","source":"link/index.md","raw":"---\ntitle: Link友链\ndate: 2022/09/10\n---\n# 关于作者\n+ [Xes-C站](https://code.xueersi.com/space/59842528)\n+ [Yzx's Blog 作者的博客](https://www.yzx-blog.tk/)\n+ [Bilibili](https://space.bilibili.com/1862585422)\n+ [Luogu洛谷](https://www.luogu.com.cn/user/676282)\n+ [Leetcode力扣](https://leetcode.cn/u/amazing-i3oydvax/)\n\n# 关于吴宇航\n+ [Wyh's Blog 吴宇航的博客](https://www.wuyuhang.ml/)\n+ [Xes-C站](https://code.xueersi.com/space/17025146)\n+ [Luogu洛谷](https://www.luogu.com.cn/user/690473)\n\n# 关于胡锦辉\n+ [Xes-C站](https://code.xueersi.com/space/2739759)\n+ [Bilibili](https://space.bilibili.com/1412286093)\n\n# 关于小轩\n+ [Xes-C站](https://code.xueersi.com/space/12907647)\n+ [Bilibili](https://space.bilibili.com/418073971)\n","updated":"2022-09-10T12:33:48.924Z","path":"link/index.html","comments":1,"layout":"page","_id":"cl7y5wuae0002eousbgexfre2","content":"<h1 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h1><ul>\n<li><a href=\"https://code.xueersi.com/space/59842528\">Xes-C站</a></li>\n<li><a href=\"https://www.yzx-blog.tk/\">Yzx’s Blog 作者的博客</a></li>\n<li><a href=\"https://space.bilibili.com/1862585422\">Bilibili</a></li>\n<li><a href=\"https://www.luogu.com.cn/user/676282\">Luogu洛谷</a></li>\n<li><a href=\"https://leetcode.cn/u/amazing-i3oydvax/\">Leetcode力扣</a></li>\n</ul>\n<h1 id=\"关于吴宇航\"><a href=\"#关于吴宇航\" class=\"headerlink\" title=\"关于吴宇航\"></a>关于吴宇航</h1><ul>\n<li><a href=\"https://www.wuyuhang.ml/\">Wyh’s Blog 吴宇航的博客</a></li>\n<li><a href=\"https://code.xueersi.com/space/17025146\">Xes-C站</a></li>\n<li><a href=\"https://www.luogu.com.cn/user/690473\">Luogu洛谷</a></li>\n</ul>\n<h1 id=\"关于胡锦辉\"><a href=\"#关于胡锦辉\" class=\"headerlink\" title=\"关于胡锦辉\"></a>关于胡锦辉</h1><ul>\n<li><a href=\"https://code.xueersi.com/space/2739759\">Xes-C站</a></li>\n<li><a href=\"https://space.bilibili.com/1412286093\">Bilibili</a></li>\n</ul>\n<h1 id=\"关于小轩\"><a href=\"#关于小轩\" class=\"headerlink\" title=\"关于小轩\"></a>关于小轩</h1><ul>\n<li><a href=\"https://code.xueersi.com/space/12907647\">Xes-C站</a></li>\n<li><a href=\"https://space.bilibili.com/418073971\">Bilibili</a></li>\n</ul>\n","site":{"data":{}},"cover":"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/23_22_5_46_daily_pic.png","excerpt":"","more":"<h1 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h1><ul>\n<li><a href=\"https://code.xueersi.com/space/59842528\">Xes-C站</a></li>\n<li><a href=\"https://www.yzx-blog.tk/\">Yzx’s Blog 作者的博客</a></li>\n<li><a href=\"https://space.bilibili.com/1862585422\">Bilibili</a></li>\n<li><a href=\"https://www.luogu.com.cn/user/676282\">Luogu洛谷</a></li>\n<li><a href=\"https://leetcode.cn/u/amazing-i3oydvax/\">Leetcode力扣</a></li>\n</ul>\n<h1 id=\"关于吴宇航\"><a href=\"#关于吴宇航\" class=\"headerlink\" title=\"关于吴宇航\"></a>关于吴宇航</h1><ul>\n<li><a href=\"https://www.wuyuhang.ml/\">Wyh’s Blog 吴宇航的博客</a></li>\n<li><a href=\"https://code.xueersi.com/space/17025146\">Xes-C站</a></li>\n<li><a href=\"https://www.luogu.com.cn/user/690473\">Luogu洛谷</a></li>\n</ul>\n<h1 id=\"关于胡锦辉\"><a href=\"#关于胡锦辉\" class=\"headerlink\" title=\"关于胡锦辉\"></a>关于胡锦辉</h1><ul>\n<li><a href=\"https://code.xueersi.com/space/2739759\">Xes-C站</a></li>\n<li><a href=\"https://space.bilibili.com/1412286093\">Bilibili</a></li>\n</ul>\n<h1 id=\"关于小轩\"><a href=\"#关于小轩\" class=\"headerlink\" title=\"关于小轩\"></a>关于小轩</h1><ul>\n<li><a href=\"https://code.xueersi.com/space/12907647\">Xes-C站</a></li>\n<li><a href=\"https://space.bilibili.com/418073971\">Bilibili</a></li>\n</ul>\n"},{"title":"Tags标签","date":"2022-02-05T10:29:52.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags标签\ndate: 2022-02-05 18:29:52\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2022-09-10T12:15:47.160Z","path":"tags/index.html","comments":1,"_id":"cl7y5wuah0006eous74ud44v0","content":"","site":{"data":{}},"cover":"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/23_22_5_46_daily_pic.png","excerpt":"","more":""},{"title":"About关于","date":"2022-08-13T08:01:30.000Z","_content":"\n本博客由Alex袁梓轩在2022.08创建\n\n此后我将再次发布一些关于Python和C++方面的文章\n","source":"about/index.md","raw":"---\n\ntitle: About关于\ndate: 2022/8/13 16:1:30\n\n---\n\n本博客由Alex袁梓轩在2022.08创建\n\n此后我将再次发布一些关于Python和C++方面的文章\n","updated":"2022-09-10T12:23:27.733Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl7y5wuai0008eous05h07zmm","content":"<p>本博客由Alex袁梓轩在2022.08创建</p>\n<p>此后我将再次发布一些关于Python和C++方面的文章</p>\n","site":{"data":{}},"cover":"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/23_22_5_46_daily_pic.png","excerpt":"","more":"<p>本博客由Alex袁梓轩在2022.08创建</p>\n<p>此后我将再次发布一些关于Python和C++方面的文章</p>\n"},{"title":"Hello World","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"example/hello-world.md","raw":"---\ntitle: Hello World\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","date":"2022-09-10T08:14:12.130Z","updated":"2022-09-10T07:57:17.592Z","path":"example/hello-world.html","comments":1,"layout":"page","_id":"cl7y5wuaj000aeous823v8nte","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"cover":"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/23_22_5_46_daily_pic.png","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"}],"Post":[{"title":"Pygame用Mask实现精细碰撞","date":"2022-08-19T10:22:16.000Z","cover":"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/23_22_5_46_daily_pic.png","toc":true,"comments":1,"_content":"\n如果你有Pygame有一定的基础，并用过Pygame编写过游戏那么你一定有一个烦恼那就是当两个图像碰撞检测时，往往采用的是矩形碰撞检测，这样就会导致，两个图案实际上还没有碰到，Pygame就识别为碰到了\n\n而Pygame中的Mask(遮罩)模块就是解决这个问题很好的方法，我们把这种用Mask实现碰撞检测的方法叫做精细碰撞，当然，这篇文章中实现的是背景色为透明度图片，而并非白色\n\n<!--more-->\n\n## Pygame.Mask模块实现精细碰撞\n\n### 分步骤实现\n\n+ 创建发生碰撞的图片对象和矩形\n  \n  - 参数讲解:\n    这里的Rect函数中的参数分别为x、y坐标，和长、宽\n    pygame.transform.scale(pygame.image.load(\"gib.png\"),(200,200))：这是改变图片gib.png大小为200*200\n    \n    ```Python\n      big = pygame.transform.scale(pygame.image.load(\"gib.png\"),(200,200))\n      small = pygame.transform.scale(pygame.image.load(\"mal.png\"),(100,100))\n      rectbig=pygame.Rect(200,200,200,200)\n      rectsmall=pygame.Rect(0,0,100,100)\n    ```\n\n+ 创建发生碰撞的图片对象所对应的遮罩\n  \n  - 参数讲解:\n    这里的big和small都是一个图片的对象\n    \n    ```\n      maskbig=pygame.mask.from_surface(big)\n      masksmall=pygame.mask.from_surface(small)\n    ```\n\n+ Mask遮罩碰撞检测\n  \n  - 参数讲解\n    maskA和maskB都是两个遮罩\n    其中offset是一个元组，格式如下：(maskB的x坐标.-maskA的x坐标,maskB的y坐标-maskA的y坐标)\n    这里元组的两个元素应该都是整形，所以如果坐标是小数的话请使用int()函数转为整数\n    \n    ```Python\n      maskA.overlap(maskB,offset)\n    ```\n  \n  - 参数讲解\n    maskA.overlap(maskA,offset)：这个函数是检测mask遮罩碰撞的函数\n    如果返回值为None表示没有碰撞，否则返回一个元组，所以这边用!=None表示已经碰撞\n    \n    ```Python\n      if masksmall.overlap(maskbig,offset)!=None: # 已经碰撞\n          print(masksmall.overlap(maskbig,offset))\n    ```\n  \n  - 实例\n    \n    ```\n      offset=(int(200-sx),int(200-sy))\n      if masksmall.overlap(maskbig,offset)!=None: # 已经碰撞\n          print(masksmall.overlap(maskbig,offset))\n      else: #没有碰撞\n          print(\"NO-Collide\")\n    ```\n\n### Pygame做一个演示\n\n+ Mask碰撞检测和矩形碰撞的比较\n    这里我在使用Mask方法检测出没有碰撞的同时，检测用常规方法是否碰撞\n    ![alt 加载失败](https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/19_22_11_35_MaskRect%E5%AE%9E%E4%BE%8B.png)\n    [代码原链接：C站](https://code.xueersi.com/home/project/detail?lang=code&pid=36703416&version=offline&form=python&langType=python)\n+ 结论\n    从图中我们明显发现这位清洁工阿姨很明显没有碰到小怪物，在Mask方法中是没有碰撞的即为：Mask:NO\n    但是在Mask：NO的同时用普通的矩形检测确实相撞的，这说明确实Mask遮罩是有用的\n\n## Mask的其他函数\n\n+ 返回Mask的大小 ````pygame.maskA.Mask.get_size() ````\n+ Mask 重叠的像素数量 pygame.maskA.Mask.overlap_area(othermask, offset) \n+ 更多函数请自行查阅\n\n## 总结\n\n其实Mask的功能还有很多，而Pygame实现精准碰撞也不止这一种，以后会有第二篇精准碰撞的文章，敬请期待！\n","source":"_posts/Pygame用Mask实现精细碰撞.md","raw":"---\ntitle: Pygame用Mask实现精细碰撞\ndate: 2022-08-19 18:22:16\ntags: [Python,Pygame,Code]\ncategories: [Code,Python,Pygame]\ncover: https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/23_22_5_46_daily_pic.png\ntoc: true\ncomments: true\n---\n\n如果你有Pygame有一定的基础，并用过Pygame编写过游戏那么你一定有一个烦恼那就是当两个图像碰撞检测时，往往采用的是矩形碰撞检测，这样就会导致，两个图案实际上还没有碰到，Pygame就识别为碰到了\n\n而Pygame中的Mask(遮罩)模块就是解决这个问题很好的方法，我们把这种用Mask实现碰撞检测的方法叫做精细碰撞，当然，这篇文章中实现的是背景色为透明度图片，而并非白色\n\n<!--more-->\n\n## Pygame.Mask模块实现精细碰撞\n\n### 分步骤实现\n\n+ 创建发生碰撞的图片对象和矩形\n  \n  - 参数讲解:\n    这里的Rect函数中的参数分别为x、y坐标，和长、宽\n    pygame.transform.scale(pygame.image.load(\"gib.png\"),(200,200))：这是改变图片gib.png大小为200*200\n    \n    ```Python\n      big = pygame.transform.scale(pygame.image.load(\"gib.png\"),(200,200))\n      small = pygame.transform.scale(pygame.image.load(\"mal.png\"),(100,100))\n      rectbig=pygame.Rect(200,200,200,200)\n      rectsmall=pygame.Rect(0,0,100,100)\n    ```\n\n+ 创建发生碰撞的图片对象所对应的遮罩\n  \n  - 参数讲解:\n    这里的big和small都是一个图片的对象\n    \n    ```\n      maskbig=pygame.mask.from_surface(big)\n      masksmall=pygame.mask.from_surface(small)\n    ```\n\n+ Mask遮罩碰撞检测\n  \n  - 参数讲解\n    maskA和maskB都是两个遮罩\n    其中offset是一个元组，格式如下：(maskB的x坐标.-maskA的x坐标,maskB的y坐标-maskA的y坐标)\n    这里元组的两个元素应该都是整形，所以如果坐标是小数的话请使用int()函数转为整数\n    \n    ```Python\n      maskA.overlap(maskB,offset)\n    ```\n  \n  - 参数讲解\n    maskA.overlap(maskA,offset)：这个函数是检测mask遮罩碰撞的函数\n    如果返回值为None表示没有碰撞，否则返回一个元组，所以这边用!=None表示已经碰撞\n    \n    ```Python\n      if masksmall.overlap(maskbig,offset)!=None: # 已经碰撞\n          print(masksmall.overlap(maskbig,offset))\n    ```\n  \n  - 实例\n    \n    ```\n      offset=(int(200-sx),int(200-sy))\n      if masksmall.overlap(maskbig,offset)!=None: # 已经碰撞\n          print(masksmall.overlap(maskbig,offset))\n      else: #没有碰撞\n          print(\"NO-Collide\")\n    ```\n\n### Pygame做一个演示\n\n+ Mask碰撞检测和矩形碰撞的比较\n    这里我在使用Mask方法检测出没有碰撞的同时，检测用常规方法是否碰撞\n    ![alt 加载失败](https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/19_22_11_35_MaskRect%E5%AE%9E%E4%BE%8B.png)\n    [代码原链接：C站](https://code.xueersi.com/home/project/detail?lang=code&pid=36703416&version=offline&form=python&langType=python)\n+ 结论\n    从图中我们明显发现这位清洁工阿姨很明显没有碰到小怪物，在Mask方法中是没有碰撞的即为：Mask:NO\n    但是在Mask：NO的同时用普通的矩形检测确实相撞的，这说明确实Mask遮罩是有用的\n\n## Mask的其他函数\n\n+ 返回Mask的大小 ````pygame.maskA.Mask.get_size() ````\n+ Mask 重叠的像素数量 pygame.maskA.Mask.overlap_area(othermask, offset) \n+ 更多函数请自行查阅\n\n## 总结\n\n其实Mask的功能还有很多，而Pygame实现精准碰撞也不止这一种，以后会有第二篇精准碰撞的文章，敬请期待！\n","slug":"Pygame用Mask实现精细碰撞","published":1,"updated":"2022-09-06T11:05:29.725Z","layout":"post","photos":[],"link":"","_id":"cl7y5wuaa0001eous4qvc5fxq","content":"<p>如果你有Pygame有一定的基础，并用过Pygame编写过游戏那么你一定有一个烦恼那就是当两个图像碰撞检测时，往往采用的是矩形碰撞检测，这样就会导致，两个图案实际上还没有碰到，Pygame就识别为碰到了</p>\n<p>而Pygame中的Mask(遮罩)模块就是解决这个问题很好的方法，我们把这种用Mask实现碰撞检测的方法叫做精细碰撞，当然，这篇文章中实现的是背景色为透明度图片，而并非白色</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Pygame-Mask模块实现精细碰撞\"><a href=\"#Pygame-Mask模块实现精细碰撞\" class=\"headerlink\" title=\"Pygame.Mask模块实现精细碰撞\"></a>Pygame.Mask模块实现精细碰撞</h2><h3 id=\"分步骤实现\"><a href=\"#分步骤实现\" class=\"headerlink\" title=\"分步骤实现\"></a>分步骤实现</h3><ul>\n<li><p>创建发生碰撞的图片对象和矩形</p>\n<ul>\n<li><p>参数讲解:<br>这里的Rect函数中的参数分别为x、y坐标，和长、宽<br>pygame.transform.scale(pygame.image.load(“gib.png”),(200,200))：这是改变图片gib.png大小为200*200</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">big = pygame.transform.scale(pygame.image.load(<span class=\"string\">&quot;gib.png&quot;</span>),(<span class=\"number\">200</span>,<span class=\"number\">200</span>))</span><br><span class=\"line\">small = pygame.transform.scale(pygame.image.load(<span class=\"string\">&quot;mal.png&quot;</span>),(<span class=\"number\">100</span>,<span class=\"number\">100</span>))</span><br><span class=\"line\">rectbig=pygame.Rect(<span class=\"number\">200</span>,<span class=\"number\">200</span>,<span class=\"number\">200</span>,<span class=\"number\">200</span>)</span><br><span class=\"line\">rectsmall=pygame.Rect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>创建发生碰撞的图片对象所对应的遮罩</p>\n<ul>\n<li><p>参数讲解:<br>这里的big和small都是一个图片的对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maskbig&#x3D;pygame.mask.from_surface(big)</span><br><span class=\"line\">masksmall&#x3D;pygame.mask.from_surface(small)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Mask遮罩碰撞检测</p>\n<ul>\n<li><p>参数讲解<br>maskA和maskB都是两个遮罩<br>其中offset是一个元组，格式如下：(maskB的x坐标.-maskA的x坐标,maskB的y坐标-maskA的y坐标)<br>这里元组的两个元素应该都是整形，所以如果坐标是小数的话请使用int()函数转为整数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maskA.overlap(maskB,offset)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数讲解<br>maskA.overlap(maskA,offset)：这个函数是检测mask遮罩碰撞的函数<br>如果返回值为None表示没有碰撞，否则返回一个元组，所以这边用!=None表示已经碰撞</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> masksmall.overlap(maskbig,offset)!=<span class=\"literal\">None</span>: <span class=\"comment\"># 已经碰撞</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(masksmall.overlap(maskbig,offset))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">offset&#x3D;(int(200-sx),int(200-sy))</span><br><span class=\"line\">if masksmall.overlap(maskbig,offset)!&#x3D;None: # 已经碰撞</span><br><span class=\"line\">    print(masksmall.overlap(maskbig,offset))</span><br><span class=\"line\">else: #没有碰撞</span><br><span class=\"line\">    print(&quot;NO-Collide&quot;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Pygame做一个演示\"><a href=\"#Pygame做一个演示\" class=\"headerlink\" title=\"Pygame做一个演示\"></a>Pygame做一个演示</h3><ul>\n<li>Mask碰撞检测和矩形碰撞的比较<br>  这里我在使用Mask方法检测出没有碰撞的同时，检测用常规方法是否碰撞<br>  <img src=\"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/19_22_11_35_MaskRect%E5%AE%9E%E4%BE%8B.png\" alt=\"alt 加载失败\"><br>  <a href=\"https://code.xueersi.com/home/project/detail?lang=code&pid=36703416&version=offline&form=python&langType=python\">代码原链接：C站</a></li>\n<li>结论<br>  从图中我们明显发现这位清洁工阿姨很明显没有碰到小怪物，在Mask方法中是没有碰撞的即为：Mask:NO<br>  但是在Mask：NO的同时用普通的矩形检测确实相撞的，这说明确实Mask遮罩是有用的</li>\n</ul>\n<h2 id=\"Mask的其他函数\"><a href=\"#Mask的其他函数\" class=\"headerlink\" title=\"Mask的其他函数\"></a>Mask的其他函数</h2><ul>\n<li>返回Mask的大小 <code>pygame.maskA.Mask.get_size() </code></li>\n<li>Mask 重叠的像素数量 pygame.maskA.Mask.overlap_area(othermask, offset) </li>\n<li>更多函数请自行查阅</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实Mask的功能还有很多，而Pygame实现精准碰撞也不止这一种，以后会有第二篇精准碰撞的文章，敬请期待！</p>\n","site":{"data":{}},"excerpt":"<p>如果你有Pygame有一定的基础，并用过Pygame编写过游戏那么你一定有一个烦恼那就是当两个图像碰撞检测时，往往采用的是矩形碰撞检测，这样就会导致，两个图案实际上还没有碰到，Pygame就识别为碰到了</p>\n<p>而Pygame中的Mask(遮罩)模块就是解决这个问题很好的方法，我们把这种用Mask实现碰撞检测的方法叫做精细碰撞，当然，这篇文章中实现的是背景色为透明度图片，而并非白色</p>","more":"<h2 id=\"Pygame-Mask模块实现精细碰撞\"><a href=\"#Pygame-Mask模块实现精细碰撞\" class=\"headerlink\" title=\"Pygame.Mask模块实现精细碰撞\"></a>Pygame.Mask模块实现精细碰撞</h2><h3 id=\"分步骤实现\"><a href=\"#分步骤实现\" class=\"headerlink\" title=\"分步骤实现\"></a>分步骤实现</h3><ul>\n<li><p>创建发生碰撞的图片对象和矩形</p>\n<ul>\n<li><p>参数讲解:<br>这里的Rect函数中的参数分别为x、y坐标，和长、宽<br>pygame.transform.scale(pygame.image.load(“gib.png”),(200,200))：这是改变图片gib.png大小为200*200</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">big = pygame.transform.scale(pygame.image.load(<span class=\"string\">&quot;gib.png&quot;</span>),(<span class=\"number\">200</span>,<span class=\"number\">200</span>))</span><br><span class=\"line\">small = pygame.transform.scale(pygame.image.load(<span class=\"string\">&quot;mal.png&quot;</span>),(<span class=\"number\">100</span>,<span class=\"number\">100</span>))</span><br><span class=\"line\">rectbig=pygame.Rect(<span class=\"number\">200</span>,<span class=\"number\">200</span>,<span class=\"number\">200</span>,<span class=\"number\">200</span>)</span><br><span class=\"line\">rectsmall=pygame.Rect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>创建发生碰撞的图片对象所对应的遮罩</p>\n<ul>\n<li><p>参数讲解:<br>这里的big和small都是一个图片的对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maskbig&#x3D;pygame.mask.from_surface(big)</span><br><span class=\"line\">masksmall&#x3D;pygame.mask.from_surface(small)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Mask遮罩碰撞检测</p>\n<ul>\n<li><p>参数讲解<br>maskA和maskB都是两个遮罩<br>其中offset是一个元组，格式如下：(maskB的x坐标.-maskA的x坐标,maskB的y坐标-maskA的y坐标)<br>这里元组的两个元素应该都是整形，所以如果坐标是小数的话请使用int()函数转为整数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maskA.overlap(maskB,offset)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数讲解<br>maskA.overlap(maskA,offset)：这个函数是检测mask遮罩碰撞的函数<br>如果返回值为None表示没有碰撞，否则返回一个元组，所以这边用!=None表示已经碰撞</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> masksmall.overlap(maskbig,offset)!=<span class=\"literal\">None</span>: <span class=\"comment\"># 已经碰撞</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(masksmall.overlap(maskbig,offset))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">offset&#x3D;(int(200-sx),int(200-sy))</span><br><span class=\"line\">if masksmall.overlap(maskbig,offset)!&#x3D;None: # 已经碰撞</span><br><span class=\"line\">    print(masksmall.overlap(maskbig,offset))</span><br><span class=\"line\">else: #没有碰撞</span><br><span class=\"line\">    print(&quot;NO-Collide&quot;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Pygame做一个演示\"><a href=\"#Pygame做一个演示\" class=\"headerlink\" title=\"Pygame做一个演示\"></a>Pygame做一个演示</h3><ul>\n<li>Mask碰撞检测和矩形碰撞的比较<br>  这里我在使用Mask方法检测出没有碰撞的同时，检测用常规方法是否碰撞<br>  <img src=\"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/19_22_11_35_MaskRect%E5%AE%9E%E4%BE%8B.png\" alt=\"alt 加载失败\"><br>  <a href=\"https://code.xueersi.com/home/project/detail?lang=code&pid=36703416&version=offline&form=python&langType=python\">代码原链接：C站</a></li>\n<li>结论<br>  从图中我们明显发现这位清洁工阿姨很明显没有碰到小怪物，在Mask方法中是没有碰撞的即为：Mask:NO<br>  但是在Mask：NO的同时用普通的矩形检测确实相撞的，这说明确实Mask遮罩是有用的</li>\n</ul>\n<h2 id=\"Mask的其他函数\"><a href=\"#Mask的其他函数\" class=\"headerlink\" title=\"Mask的其他函数\"></a>Mask的其他函数</h2><ul>\n<li>返回Mask的大小 <code>pygame.maskA.Mask.get_size() </code></li>\n<li>Mask 重叠的像素数量 pygame.maskA.Mask.overlap_area(othermask, offset) </li>\n<li>更多函数请自行查阅</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实Mask的功能还有很多，而Pygame实现精准碰撞也不止这一种，以后会有第二篇精准碰撞的文章，敬请期待！</p>"},{"title":"Python常见报错代码","date":"2022-08-29T11:42:28.000Z","cover":"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/23_22_5_46_002.webp","toc":true,"comments":1,"_content":"\n## 前言\n\n- 在我们编写程序的时候，难免遇到报错，那这个时候有些人就去Baidu了，但是其实报错代码也是有迹可循的，看懂了报错代码就可以直接找到代码错误的根源\n- 接下来我讲介绍常见的代码报错，\n- 基本规律：会显示代码报错的行数，和这一行出现错误的具体位置，以及报错类型，一下我将仅针对报错的类型进行讲解\n\n***\n\n<!--more-->\n\n## 缩进报错\n\n- 报错代码\n  \n  ```Python\n  IndentationError: expected an indented block\n  ```\n- 解决方案：\n  根据摆错的行数确定缩进错误的行，直接进行调整就可以\n\n***\n\n## 语法错误\n\n### 匹配错误\n\n- 报错代码\n  \n  ```Python\n  SyntaxError: unexpected EOF while parsing\n  ```\n- 解决方案：\n  查看报错的那一行括号是否有缺漏，引号有没有缺漏、多行注释有没有缺漏\n\n### 符号错误\n\n- 报错代码\n  \n  ```Python\n  File \"C:\\Users\\dell\\学而思直播\\code\\cache\\asset\\6/main.py\", line 2\n    if a=1:\n        ^\n  SyntaxError: invalid syntax\n  ```\n\n- 解决方案\n  检查是否将== 写成= 把=写成==\n\n***\n\n## 变量名错误\n\n- 报错代码\n  \n  ```Python\n  line1, in <module>\n    if a==1:\n  NameError: name 'a' is not defined\n  ```\n- 解决方案：\n  检查变量是否定义，在函数中的话检查是否标明为全局变量 即为global 全局变量名 #声明一个全局变量\n\n### 变量命名规范\n\n+ 只能是字母、下划线、和数字\n+ 数字不能作为变量名的开头部分\n+ 不能使用Python关键字，如print、input等\n\n***\n\n## 索引错误\n\n- 报错代码\n  \n  ```Python\n  Traceback (most recent call last):\n  File \"main.py\", line 2, in <module>\n    print(list[5])\n  IndexError: list index out of range\n  ```\n- 解决方案：\n  因为索引超过列表数量，所以检查是否索引是否过大或者过小(负索引)\n\n## 文件查找错误\n\n- 报错代码\n  \n  ```Python\n  myImg = pygame.image.load(\"img1.png\")\n  FileNotFoundError: No file 'img1.png' found inworking directory\n  ```\n- 解决方案\n  查看是否有这个文件，是否文件名拼写错误\n\n## 类型错误\n\n- 报错代码\n  \n  ```Python\n  Traceback (most recent call last):\n  File \"main.py\", line 1, in <module>\n    print(\"123\"+123)\n  TypeError: must be str, not int\n  ```\n\n- 解决方案\n  检查函数的每个参数的类型是否错误，不同变量不能相加\n\n***\n\n## 小结\n\n有BUG并不可怕，仔细查看报错代码，仔细推敲就可以修复\n\n***","source":"_posts/Python常见报错代码.md","raw":"---\ntitle: Python常见报错代码\ndate: 2022-08-29 19:42:28\ntags: [Python]\ncategories: [Code,Python,Python小技巧]\ncover: https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/23_22_5_46_002.webp\ntoc: true\ncomments: true\n---\n\n## 前言\n\n- 在我们编写程序的时候，难免遇到报错，那这个时候有些人就去Baidu了，但是其实报错代码也是有迹可循的，看懂了报错代码就可以直接找到代码错误的根源\n- 接下来我讲介绍常见的代码报错，\n- 基本规律：会显示代码报错的行数，和这一行出现错误的具体位置，以及报错类型，一下我将仅针对报错的类型进行讲解\n\n***\n\n<!--more-->\n\n## 缩进报错\n\n- 报错代码\n  \n  ```Python\n  IndentationError: expected an indented block\n  ```\n- 解决方案：\n  根据摆错的行数确定缩进错误的行，直接进行调整就可以\n\n***\n\n## 语法错误\n\n### 匹配错误\n\n- 报错代码\n  \n  ```Python\n  SyntaxError: unexpected EOF while parsing\n  ```\n- 解决方案：\n  查看报错的那一行括号是否有缺漏，引号有没有缺漏、多行注释有没有缺漏\n\n### 符号错误\n\n- 报错代码\n  \n  ```Python\n  File \"C:\\Users\\dell\\学而思直播\\code\\cache\\asset\\6/main.py\", line 2\n    if a=1:\n        ^\n  SyntaxError: invalid syntax\n  ```\n\n- 解决方案\n  检查是否将== 写成= 把=写成==\n\n***\n\n## 变量名错误\n\n- 报错代码\n  \n  ```Python\n  line1, in <module>\n    if a==1:\n  NameError: name 'a' is not defined\n  ```\n- 解决方案：\n  检查变量是否定义，在函数中的话检查是否标明为全局变量 即为global 全局变量名 #声明一个全局变量\n\n### 变量命名规范\n\n+ 只能是字母、下划线、和数字\n+ 数字不能作为变量名的开头部分\n+ 不能使用Python关键字，如print、input等\n\n***\n\n## 索引错误\n\n- 报错代码\n  \n  ```Python\n  Traceback (most recent call last):\n  File \"main.py\", line 2, in <module>\n    print(list[5])\n  IndexError: list index out of range\n  ```\n- 解决方案：\n  因为索引超过列表数量，所以检查是否索引是否过大或者过小(负索引)\n\n## 文件查找错误\n\n- 报错代码\n  \n  ```Python\n  myImg = pygame.image.load(\"img1.png\")\n  FileNotFoundError: No file 'img1.png' found inworking directory\n  ```\n- 解决方案\n  查看是否有这个文件，是否文件名拼写错误\n\n## 类型错误\n\n- 报错代码\n  \n  ```Python\n  Traceback (most recent call last):\n  File \"main.py\", line 1, in <module>\n    print(\"123\"+123)\n  TypeError: must be str, not int\n  ```\n\n- 解决方案\n  检查函数的每个参数的类型是否错误，不同变量不能相加\n\n***\n\n## 小结\n\n有BUG并不可怕，仔细查看报错代码，仔细推敲就可以修复\n\n***","slug":"Python常见报错代码","published":1,"updated":"2022-09-06T11:06:00.666Z","layout":"post","photos":[],"link":"","_id":"cl7y5wuae0003eous4qj00qcb","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>在我们编写程序的时候，难免遇到报错，那这个时候有些人就去Baidu了，但是其实报错代码也是有迹可循的，看懂了报错代码就可以直接找到代码错误的根源</li>\n<li>接下来我讲介绍常见的代码报错，</li>\n<li>基本规律：会显示代码报错的行数，和这一行出现错误的具体位置，以及报错类型，一下我将仅针对报错的类型进行讲解</li>\n</ul>\n<hr>\n<span id=\"more\"></span>\n\n<h2 id=\"缩进报错\"><a href=\"#缩进报错\" class=\"headerlink\" title=\"缩进报错\"></a>缩进报错</h2><ul>\n<li><p>报错代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IndentationError: expected an indented block</span><br></pre></td></tr></table></figure></li>\n<li><p>解决方案：<br>根据摆错的行数确定缩进错误的行，直接进行调整就可以</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"语法错误\"><a href=\"#语法错误\" class=\"headerlink\" title=\"语法错误\"></a>语法错误</h2><h3 id=\"匹配错误\"><a href=\"#匹配错误\" class=\"headerlink\" title=\"匹配错误\"></a>匹配错误</h3><ul>\n<li><p>报错代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SyntaxError: unexpected EOF <span class=\"keyword\">while</span> parsing</span><br></pre></td></tr></table></figure></li>\n<li><p>解决方案：<br>查看报错的那一行括号是否有缺漏，引号有没有缺漏、多行注释有没有缺漏</p>\n</li>\n</ul>\n<h3 id=\"符号错误\"><a href=\"#符号错误\" class=\"headerlink\" title=\"符号错误\"></a>符号错误</h3><ul>\n<li><p>报错代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File <span class=\"string\">&quot;C:\\Users\\dell\\学而思直播\\code\\cache\\asset\\6/main.py&quot;</span>, line <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> a=<span class=\"number\">1</span>:</span><br><span class=\"line\">      ^</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解决方案<br>检查是否将== 写成= 把=写成==</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"变量名错误\"><a href=\"#变量名错误\" class=\"headerlink\" title=\"变量名错误\"></a>变量名错误</h2><ul>\n<li><p>报错代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line1, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> a==<span class=\"number\">1</span>:</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></table></figure></li>\n<li><p>解决方案：<br>检查变量是否定义，在函数中的话检查是否标明为全局变量 即为global 全局变量名 #声明一个全局变量</p>\n</li>\n</ul>\n<h3 id=\"变量命名规范\"><a href=\"#变量命名规范\" class=\"headerlink\" title=\"变量命名规范\"></a>变量命名规范</h3><ul>\n<li>只能是字母、下划线、和数字</li>\n<li>数字不能作为变量名的开头部分</li>\n<li>不能使用Python关键字，如print、input等</li>\n</ul>\n<hr>\n<h2 id=\"索引错误\"><a href=\"#索引错误\" class=\"headerlink\" title=\"索引错误\"></a>索引错误</h2><ul>\n<li><p>报错代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">File <span class=\"string\">&quot;main.py&quot;</span>, line <span class=\"number\">2</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>[<span class=\"number\">5</span>])</span><br><span class=\"line\">IndexError: <span class=\"built_in\">list</span> index out of <span class=\"built_in\">range</span></span><br></pre></td></tr></table></figure></li>\n<li><p>解决方案：<br>因为索引超过列表数量，所以检查是否索引是否过大或者过小(负索引)</p>\n</li>\n</ul>\n<h2 id=\"文件查找错误\"><a href=\"#文件查找错误\" class=\"headerlink\" title=\"文件查找错误\"></a>文件查找错误</h2><ul>\n<li><p>报错代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myImg = pygame.image.load(<span class=\"string\">&quot;img1.png&quot;</span>)</span><br><span class=\"line\">FileNotFoundError: No file <span class=\"string\">&#x27;img1.png&#x27;</span> found inworking directory</span><br></pre></td></tr></table></figure></li>\n<li><p>解决方案<br>查看是否有这个文件，是否文件名拼写错误</p>\n</li>\n</ul>\n<h2 id=\"类型错误\"><a href=\"#类型错误\" class=\"headerlink\" title=\"类型错误\"></a>类型错误</h2><ul>\n<li><p>报错代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">File <span class=\"string\">&quot;main.py&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;123&quot;</span>+<span class=\"number\">123</span>)</span><br><span class=\"line\">TypeError: must be <span class=\"built_in\">str</span>, <span class=\"keyword\">not</span> <span class=\"built_in\">int</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解决方案<br>检查函数的每个参数的类型是否错误，不同变量不能相加</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>有BUG并不可怕，仔细查看报错代码，仔细推敲就可以修复</p>\n<hr>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>在我们编写程序的时候，难免遇到报错，那这个时候有些人就去Baidu了，但是其实报错代码也是有迹可循的，看懂了报错代码就可以直接找到代码错误的根源</li>\n<li>接下来我讲介绍常见的代码报错，</li>\n<li>基本规律：会显示代码报错的行数，和这一行出现错误的具体位置，以及报错类型，一下我将仅针对报错的类型进行讲解</li>\n</ul>\n<hr>","more":"<h2 id=\"缩进报错\"><a href=\"#缩进报错\" class=\"headerlink\" title=\"缩进报错\"></a>缩进报错</h2><ul>\n<li><p>报错代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IndentationError: expected an indented block</span><br></pre></td></tr></table></figure></li>\n<li><p>解决方案：<br>根据摆错的行数确定缩进错误的行，直接进行调整就可以</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"语法错误\"><a href=\"#语法错误\" class=\"headerlink\" title=\"语法错误\"></a>语法错误</h2><h3 id=\"匹配错误\"><a href=\"#匹配错误\" class=\"headerlink\" title=\"匹配错误\"></a>匹配错误</h3><ul>\n<li><p>报错代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SyntaxError: unexpected EOF <span class=\"keyword\">while</span> parsing</span><br></pre></td></tr></table></figure></li>\n<li><p>解决方案：<br>查看报错的那一行括号是否有缺漏，引号有没有缺漏、多行注释有没有缺漏</p>\n</li>\n</ul>\n<h3 id=\"符号错误\"><a href=\"#符号错误\" class=\"headerlink\" title=\"符号错误\"></a>符号错误</h3><ul>\n<li><p>报错代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File <span class=\"string\">&quot;C:\\Users\\dell\\学而思直播\\code\\cache\\asset\\6/main.py&quot;</span>, line <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> a=<span class=\"number\">1</span>:</span><br><span class=\"line\">      ^</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解决方案<br>检查是否将== 写成= 把=写成==</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"变量名错误\"><a href=\"#变量名错误\" class=\"headerlink\" title=\"变量名错误\"></a>变量名错误</h2><ul>\n<li><p>报错代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">line1, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> a==<span class=\"number\">1</span>:</span><br><span class=\"line\">NameError: name <span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></table></figure></li>\n<li><p>解决方案：<br>检查变量是否定义，在函数中的话检查是否标明为全局变量 即为global 全局变量名 #声明一个全局变量</p>\n</li>\n</ul>\n<h3 id=\"变量命名规范\"><a href=\"#变量命名规范\" class=\"headerlink\" title=\"变量命名规范\"></a>变量命名规范</h3><ul>\n<li>只能是字母、下划线、和数字</li>\n<li>数字不能作为变量名的开头部分</li>\n<li>不能使用Python关键字，如print、input等</li>\n</ul>\n<hr>\n<h2 id=\"索引错误\"><a href=\"#索引错误\" class=\"headerlink\" title=\"索引错误\"></a>索引错误</h2><ul>\n<li><p>报错代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">File <span class=\"string\">&quot;main.py&quot;</span>, line <span class=\"number\">2</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>[<span class=\"number\">5</span>])</span><br><span class=\"line\">IndexError: <span class=\"built_in\">list</span> index out of <span class=\"built_in\">range</span></span><br></pre></td></tr></table></figure></li>\n<li><p>解决方案：<br>因为索引超过列表数量，所以检查是否索引是否过大或者过小(负索引)</p>\n</li>\n</ul>\n<h2 id=\"文件查找错误\"><a href=\"#文件查找错误\" class=\"headerlink\" title=\"文件查找错误\"></a>文件查找错误</h2><ul>\n<li><p>报错代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myImg = pygame.image.load(<span class=\"string\">&quot;img1.png&quot;</span>)</span><br><span class=\"line\">FileNotFoundError: No file <span class=\"string\">&#x27;img1.png&#x27;</span> found inworking directory</span><br></pre></td></tr></table></figure></li>\n<li><p>解决方案<br>查看是否有这个文件，是否文件名拼写错误</p>\n</li>\n</ul>\n<h2 id=\"类型错误\"><a href=\"#类型错误\" class=\"headerlink\" title=\"类型错误\"></a>类型错误</h2><ul>\n<li><p>报错代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">File <span class=\"string\">&quot;main.py&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;123&quot;</span>+<span class=\"number\">123</span>)</span><br><span class=\"line\">TypeError: must be <span class=\"built_in\">str</span>, <span class=\"keyword\">not</span> <span class=\"built_in\">int</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解决方案<br>检查函数的每个参数的类型是否错误，不同变量不能相加</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>有BUG并不可怕，仔细查看报错代码，仔细推敲就可以修复</p>\n<hr>"},{"title":"Sprite精灵实现Pygame矩形、圆形、精细碰撞","date":"2022-08-20T10:05:33.000Z","toc":true,"cover":"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/23_22_5_46_016.webp","_content":"\n## 前言\n\n+ 如果你有Pygame有一定的基础，并用过Pygame编写过游戏那么你一定有一个烦恼那就是当两个图像碰撞检测时，往往采用的是矩形碰撞检测这样就会导致，两个图案实际上还没有碰到，Pygame就识别为碰到了\n\n+ 而Pygame中的Mask(遮罩)模块就是解决这个问题很好的方法，我们把这种用Mask实现碰撞检测的方法叫做精细碰撞，然而，这种方法实现的 __难度稍微有点大__ ，而且 __代码碎片很多__ ，__很凌乱__\n\n+ 而在Pygame中有这么一个类，专门是为游戏角色而设置的，这个类就是 __Sprite精灵类__ ，这个类里面就有帮我们封装好的三种碰撞检测方法：Rect、Circle、Mask，其中Mask就是上面提到的遮罩\n  \n  <!-- more -->\n  \n  ## Sprite精灵类实现精细碰撞\n\n+ 创建精灵\n  \n  - 这里是创建了一个名为s的类\n    \n    ```Python\n    s = pygame.sprite.Sprite()\n    s.image = pygame.transform.scale(pygame.image.load('file.png'),(width,height))\n    s.rect = pygame.Rect(x,y,width,height)\n    ```\n  \n  - 实例：创建两个待碰撞精灵，并为其image和rect属性赋值\n    \n    ```Python\n      s = pygame.sprite.Sprite()\n      s.image = pygame.transform.scale(pygame.image.load('A.png'),(350,350))\n      s.rect = pygame.Rect(300,150,350,350)\n    \n      c = pygame.sprite.Sprite()\n      c.image = pygame.transform.scale(pygame.image.load('B.png'),(200,200))\n      c.rect = pygame.Rect(0,0,100,100)\n    ```\n\n+ 碰撞检测\n  \n  - 矩形碰撞检测\n    sp1、sp2分别是两个Sprite精灵\n    如果返回1为碰撞,0为没有碰撞\n    \n    ```Python\n    pygame.sprite.collide_rect(sp1,sp2)\n    ```\n  \n  - 外接圆碰撞检测\n    sp1、sp2分别是两个Sprite精灵\n    如果返回True为碰撞，False为没有碰撞\n    \n    ```Python\n    pygame.sprite.collide_circle(sp1,sp2)\n    ```\n  \n  - Mask像素碰撞(精细碰撞)\n    sp1、sp2分别是两个Sprite精灵\n    如果返回None为不碰撞，返回一个元组为碰撞\n    \n    ```Python\n    pygame.sprite.collide_mask(sp1,sp2)\n    ```\n    \n    ## 原理\n    \n    在上一篇文章中，我介绍了Mask遮罩，其实，这个Sprite精灵只是对它的封装，当然Sprite可不止只有这个功能，\n    他的原来就是检测两个图案非透明部分有多上像素重叠，所以在物体1和物体2之间的碰撞难免还是会因为两个像素仅仅\"接壤\"而没有判断碰撞，但对比rect碰撞已经好了很多了\n\n## Pygame演示\n\n+ __这里是三种方式的对比，可见：外接圆碰撞精度>矩形碰撞>精细碰撞__\n  ![alt 加载失败](https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/20_19_20_52_Sprite%E4%BA%8B%E4%BE%8B%E7%A2%B0%E6%92%9E.png)\n+ [原链接已开源](https://code.xueersi.com/home/project/detail?lang=code&pid=36709123&version=offline&form=python&langType=python)\n\n## 总结\n\n当然Sprite的功能远不止这些，这其实是pygame的一个游戏角色群的处理类，功能还是有非常之多的\n","source":"_posts/Sprite精灵实现Pygame矩形、圆形、精细碰撞.md","raw":"---\ntitle: Sprite精灵实现Pygame矩形、圆形、精细碰撞\ndate: 2022-08-20 18:05:33\ntags: [Python,Pygame,Code]\ncategories: [Code,Python,Pygame]\ntoc: true\ncover: https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/23_22_5_46_016.webp\n---\n\n## 前言\n\n+ 如果你有Pygame有一定的基础，并用过Pygame编写过游戏那么你一定有一个烦恼那就是当两个图像碰撞检测时，往往采用的是矩形碰撞检测这样就会导致，两个图案实际上还没有碰到，Pygame就识别为碰到了\n\n+ 而Pygame中的Mask(遮罩)模块就是解决这个问题很好的方法，我们把这种用Mask实现碰撞检测的方法叫做精细碰撞，然而，这种方法实现的 __难度稍微有点大__ ，而且 __代码碎片很多__ ，__很凌乱__\n\n+ 而在Pygame中有这么一个类，专门是为游戏角色而设置的，这个类就是 __Sprite精灵类__ ，这个类里面就有帮我们封装好的三种碰撞检测方法：Rect、Circle、Mask，其中Mask就是上面提到的遮罩\n  \n  <!-- more -->\n  \n  ## Sprite精灵类实现精细碰撞\n\n+ 创建精灵\n  \n  - 这里是创建了一个名为s的类\n    \n    ```Python\n    s = pygame.sprite.Sprite()\n    s.image = pygame.transform.scale(pygame.image.load('file.png'),(width,height))\n    s.rect = pygame.Rect(x,y,width,height)\n    ```\n  \n  - 实例：创建两个待碰撞精灵，并为其image和rect属性赋值\n    \n    ```Python\n      s = pygame.sprite.Sprite()\n      s.image = pygame.transform.scale(pygame.image.load('A.png'),(350,350))\n      s.rect = pygame.Rect(300,150,350,350)\n    \n      c = pygame.sprite.Sprite()\n      c.image = pygame.transform.scale(pygame.image.load('B.png'),(200,200))\n      c.rect = pygame.Rect(0,0,100,100)\n    ```\n\n+ 碰撞检测\n  \n  - 矩形碰撞检测\n    sp1、sp2分别是两个Sprite精灵\n    如果返回1为碰撞,0为没有碰撞\n    \n    ```Python\n    pygame.sprite.collide_rect(sp1,sp2)\n    ```\n  \n  - 外接圆碰撞检测\n    sp1、sp2分别是两个Sprite精灵\n    如果返回True为碰撞，False为没有碰撞\n    \n    ```Python\n    pygame.sprite.collide_circle(sp1,sp2)\n    ```\n  \n  - Mask像素碰撞(精细碰撞)\n    sp1、sp2分别是两个Sprite精灵\n    如果返回None为不碰撞，返回一个元组为碰撞\n    \n    ```Python\n    pygame.sprite.collide_mask(sp1,sp2)\n    ```\n    \n    ## 原理\n    \n    在上一篇文章中，我介绍了Mask遮罩，其实，这个Sprite精灵只是对它的封装，当然Sprite可不止只有这个功能，\n    他的原来就是检测两个图案非透明部分有多上像素重叠，所以在物体1和物体2之间的碰撞难免还是会因为两个像素仅仅\"接壤\"而没有判断碰撞，但对比rect碰撞已经好了很多了\n\n## Pygame演示\n\n+ __这里是三种方式的对比，可见：外接圆碰撞精度>矩形碰撞>精细碰撞__\n  ![alt 加载失败](https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/20_19_20_52_Sprite%E4%BA%8B%E4%BE%8B%E7%A2%B0%E6%92%9E.png)\n+ [原链接已开源](https://code.xueersi.com/home/project/detail?lang=code&pid=36709123&version=offline&form=python&langType=python)\n\n## 总结\n\n当然Sprite的功能远不止这些，这其实是pygame的一个游戏角色群的处理类，功能还是有非常之多的\n","slug":"Sprite精灵实现Pygame矩形、圆形、精细碰撞","published":1,"updated":"2022-09-03T05:10:57.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7y5wuah0007eousgjj1dj3k","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li><p>如果你有Pygame有一定的基础，并用过Pygame编写过游戏那么你一定有一个烦恼那就是当两个图像碰撞检测时，往往采用的是矩形碰撞检测这样就会导致，两个图案实际上还没有碰到，Pygame就识别为碰到了</p>\n</li>\n<li><p>而Pygame中的Mask(遮罩)模块就是解决这个问题很好的方法，我们把这种用Mask实现碰撞检测的方法叫做精细碰撞，然而，这种方法实现的 <strong>难度稍微有点大</strong> ，而且 <strong>代码碎片很多</strong> ，<strong>很凌乱</strong></p>\n</li>\n<li><p>而在Pygame中有这么一个类，专门是为游戏角色而设置的，这个类就是 <strong>Sprite精灵类</strong> ，这个类里面就有帮我们封装好的三种碰撞检测方法：Rect、Circle、Mask，其中Mask就是上面提到的遮罩</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Sprite精灵类实现精细碰撞\"><a href=\"#Sprite精灵类实现精细碰撞\" class=\"headerlink\" title=\"Sprite精灵类实现精细碰撞\"></a>Sprite精灵类实现精细碰撞</h2></li>\n<li><p>创建精灵</p>\n<ul>\n<li><p>这里是创建了一个名为s的类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = pygame.sprite.Sprite()</span><br><span class=\"line\">s.image = pygame.transform.scale(pygame.image.load(<span class=\"string\">&#x27;file.png&#x27;</span>),(width,height))</span><br><span class=\"line\">s.rect = pygame.Rect(x,y,width,height)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例：创建两个待碰撞精灵，并为其image和rect属性赋值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = pygame.sprite.Sprite()</span><br><span class=\"line\">s.image = pygame.transform.scale(pygame.image.load(<span class=\"string\">&#x27;A.png&#x27;</span>),(<span class=\"number\">350</span>,<span class=\"number\">350</span>))</span><br><span class=\"line\">s.rect = pygame.Rect(<span class=\"number\">300</span>,<span class=\"number\">150</span>,<span class=\"number\">350</span>,<span class=\"number\">350</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">c = pygame.sprite.Sprite()</span><br><span class=\"line\">c.image = pygame.transform.scale(pygame.image.load(<span class=\"string\">&#x27;B.png&#x27;</span>),(<span class=\"number\">200</span>,<span class=\"number\">200</span>))</span><br><span class=\"line\">c.rect = pygame.Rect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>碰撞检测</p>\n<ul>\n<li><p>矩形碰撞检测<br>sp1、sp2分别是两个Sprite精灵<br>如果返回1为碰撞,0为没有碰撞</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pygame.sprite.collide_rect(sp1,sp2)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>外接圆碰撞检测<br>sp1、sp2分别是两个Sprite精灵<br>如果返回True为碰撞，False为没有碰撞</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pygame.sprite.collide_circle(sp1,sp2)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Mask像素碰撞(精细碰撞)<br>sp1、sp2分别是两个Sprite精灵<br>如果返回None为不碰撞，返回一个元组为碰撞</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pygame.sprite.collide_mask(sp1,sp2)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>在上一篇文章中，我介绍了Mask遮罩，其实，这个Sprite精灵只是对它的封装，当然Sprite可不止只有这个功能，<br>他的原来就是检测两个图案非透明部分有多上像素重叠，所以在物体1和物体2之间的碰撞难免还是会因为两个像素仅仅”接壤”而没有判断碰撞，但对比rect碰撞已经好了很多了</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Pygame演示\"><a href=\"#Pygame演示\" class=\"headerlink\" title=\"Pygame演示\"></a>Pygame演示</h2><ul>\n<li><strong>这里是三种方式的对比，可见：外接圆碰撞精度&gt;矩形碰撞&gt;精细碰撞</strong><br><img src=\"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/20_19_20_52_Sprite%E4%BA%8B%E4%BE%8B%E7%A2%B0%E6%92%9E.png\" alt=\"alt 加载失败\"></li>\n<li><a href=\"https://code.xueersi.com/home/project/detail?lang=code&pid=36709123&version=offline&form=python&langType=python\">原链接已开源</a></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当然Sprite的功能远不止这些，这其实是pygame的一个游戏角色群的处理类，功能还是有非常之多的</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li><p>如果你有Pygame有一定的基础，并用过Pygame编写过游戏那么你一定有一个烦恼那就是当两个图像碰撞检测时，往往采用的是矩形碰撞检测这样就会导致，两个图案实际上还没有碰到，Pygame就识别为碰到了</p>\n</li>\n<li><p>而Pygame中的Mask(遮罩)模块就是解决这个问题很好的方法，我们把这种用Mask实现碰撞检测的方法叫做精细碰撞，然而，这种方法实现的 <strong>难度稍微有点大</strong> ，而且 <strong>代码碎片很多</strong> ，<strong>很凌乱</strong></p>\n</li>\n<li><p>而在Pygame中有这么一个类，专门是为游戏角色而设置的，这个类就是 <strong>Sprite精灵类</strong> ，这个类里面就有帮我们封装好的三种碰撞检测方法：Rect、Circle、Mask，其中Mask就是上面提到的遮罩</p>","more":"<h2 id=\"Sprite精灵类实现精细碰撞\"><a href=\"#Sprite精灵类实现精细碰撞\" class=\"headerlink\" title=\"Sprite精灵类实现精细碰撞\"></a>Sprite精灵类实现精细碰撞</h2></li>\n<li><p>创建精灵</p>\n<ul>\n<li><p>这里是创建了一个名为s的类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = pygame.sprite.Sprite()</span><br><span class=\"line\">s.image = pygame.transform.scale(pygame.image.load(<span class=\"string\">&#x27;file.png&#x27;</span>),(width,height))</span><br><span class=\"line\">s.rect = pygame.Rect(x,y,width,height)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实例：创建两个待碰撞精灵，并为其image和rect属性赋值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = pygame.sprite.Sprite()</span><br><span class=\"line\">s.image = pygame.transform.scale(pygame.image.load(<span class=\"string\">&#x27;A.png&#x27;</span>),(<span class=\"number\">350</span>,<span class=\"number\">350</span>))</span><br><span class=\"line\">s.rect = pygame.Rect(<span class=\"number\">300</span>,<span class=\"number\">150</span>,<span class=\"number\">350</span>,<span class=\"number\">350</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">c = pygame.sprite.Sprite()</span><br><span class=\"line\">c.image = pygame.transform.scale(pygame.image.load(<span class=\"string\">&#x27;B.png&#x27;</span>),(<span class=\"number\">200</span>,<span class=\"number\">200</span>))</span><br><span class=\"line\">c.rect = pygame.Rect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>碰撞检测</p>\n<ul>\n<li><p>矩形碰撞检测<br>sp1、sp2分别是两个Sprite精灵<br>如果返回1为碰撞,0为没有碰撞</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pygame.sprite.collide_rect(sp1,sp2)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>外接圆碰撞检测<br>sp1、sp2分别是两个Sprite精灵<br>如果返回True为碰撞，False为没有碰撞</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pygame.sprite.collide_circle(sp1,sp2)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Mask像素碰撞(精细碰撞)<br>sp1、sp2分别是两个Sprite精灵<br>如果返回None为不碰撞，返回一个元组为碰撞</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pygame.sprite.collide_mask(sp1,sp2)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>在上一篇文章中，我介绍了Mask遮罩，其实，这个Sprite精灵只是对它的封装，当然Sprite可不止只有这个功能，<br>他的原来就是检测两个图案非透明部分有多上像素重叠，所以在物体1和物体2之间的碰撞难免还是会因为两个像素仅仅”接壤”而没有判断碰撞，但对比rect碰撞已经好了很多了</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Pygame演示\"><a href=\"#Pygame演示\" class=\"headerlink\" title=\"Pygame演示\"></a>Pygame演示</h2><ul>\n<li><strong>这里是三种方式的对比，可见：外接圆碰撞精度&gt;矩形碰撞&gt;精细碰撞</strong><br><img src=\"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/20_19_20_52_Sprite%E4%BA%8B%E4%BE%8B%E7%A2%B0%E6%92%9E.png\" alt=\"alt 加载失败\"></li>\n<li><a href=\"https://code.xueersi.com/home/project/detail?lang=code&pid=36709123&version=offline&form=python&langType=python\">原链接已开源</a></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当然Sprite的功能远不止这些，这其实是pygame的一个游戏角色群的处理类，功能还是有非常之多的</p>"},{"title":"Vercel+Github搭建Hexo博客","date":"2022-08-13T11:42:54.000Z","toc":true,"cover":"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_43_tit2.svg","_content":"\n### 工作原理\n\n+ github是一个代码托管平台，缺点是加载的时候特别慢\n+ vercel完美结局了这个问题，vercel加载速度相对快一些，可以和github绑定，而且根据github储存库实时拉取更新\n+ Hexo一个快速、简洁且高效的博客框架,它支持几条简短的命令发布博客,因此是对于初学者比较友好的博客框架\n\n\n\n<!-- more -->\n\n### 准备工作\n\n- github账号、vercel账号\n- nodejs v12版本以上 、 git\n  \n  > 网站官网：\n  > \n  > > [github官网](https://github.com/)、[vercel官网](https://vercel.com/)\n  > > [git官网](https://git-scm.com/)、[nodejs官网](https://nodejs.org/en/)\n\n* * *\n\n### 创建Vercel项目并拉取\n\n1. 首先进vercel官网，点击 New Project 按钮，然后点击 Browse All Templates 按钮 找到Hexo主题然后 修改项目名 把下面那个框勾掉（那个是创建私有储存库），然后你的github里会自动生成一个项目\n2. 配置git :\n   - 打开git-bush 输入ssh-keygen -t rsa -C \"{{github的电子邮箱地址}}\" 连续 3 次回车，最终会在用户目录下生成个包含公钥私钥等数据的目录 ( 一般是 C:/Users/{{你的用户名}}/.ssh/ ) 将刚复制的内容粘贴到 Key(你的github->setting->SSH) 中，Title 随便写一个，点击保存 ( Add SSH Key ) \n   - 运行下方命令 :\n     \n     ```\n     git config --global user.name \"{{你的 GitHub username}}\"\n     git config --global user.email \"{{你的 GitHub 注册邮箱地址}}\"\n     ssh -T git@github.com # 邮箱地址不用改 如果提示 Are you sure you want to continue connecting (yes/no)? 请输入 yes 并回车。\n     ```\n3. 在本地选一个文件夹 打开git-bash 运行：git clone https://github.com/用户名/仓库名称\n\n* * *\n\n### 更换主题\n\n1. 首先打开[hexo官网](https://hexo.io/themes/) 挑选一个心仪的主题 ，单击图片可以预览网页，点下面文字到github仓库\n   __注意：不要选择indigo这个主题，这个主题有漏洞，配置起来很麻烦，有些主题预览不了的尽量不要选，避免一会的麻烦（作者一开始选的就是indigo）__\n2. 到仓库之后 在主文件夹打开git-bash 然后输入 git clone 你刚才的主题的仓库的网址 themes/主题名\n3. 打开主项目下的 _config.yml 文件 把 theme：lanspace 改为 theme:你的主题名 然后进到 themes文件夹里把landspace文件夹删了（也可以不删）\n\n* * *\n\n### 更改配置\n\n__注意：这一步需要有较好的英文功底__\n\n1. 进入 打开主项目下的 _config.yml 文件  修改\n    __注意：这里冒号后面有空格 我之前就是应为这个找半天不知道报错在哪__\n   \n   ```\n   title: 标题\n   subtitle: 你的个性签名\n   author: 你的名字\n   language: zh-CN\n   # URL\n   url: 这里写你vercel预览的网址，我这边是：https://yzx-blog.vercel.app/\n   ```\n2. 进入你的主题文件夹里面的 _config.yml 文件 修改各项属性 由于每个主题各有不同 大家可以在网上搜索教程\n\n* * *\n\n### 生成网页\n\n1. 万事俱备后再在（这一步其实应该提前做的）\n    cmd运行：\n   \n   ```\n   npm install -g hexo \n   ```\n   \n    主目录运行：\n   \n   ```\n   npm install -g hexo \n   npm install hexo-cli --save\n   npm install hexo-deployer-git --save\n   ```\n   \n    这是在搭建hexo环境\n\n2. 生成网页\n   \n   ```\n   hexo clean\n   hexo g\n   hexo s\n   ```\n   \n    hexo s之后会在http://localhost:4000/显示你的网页 如果这个时候你成功了那么就可以提交到github了\n   \n    __可能的报错：__\n   \n   ```\n   error: RPC failed； curl 28 OpenSSL SSL_read: Connection was reset, errno 10054 fatal: expected\n   ```\n   \n    __解决办法__\n   \n   ```\n   git config --global http.sslVerify \"false\"\n   ```\n\n* * *\n\n### 提交并成功部署博客\n\n1. 主文件夹打开git-bush\n2. 运行:以下代码\n   \n   ```\n   git remote\n   git remote 你vercel生成的那个github仓库网址\n   git add .（可能要尝试两次）\n   git commit -m \"提交的备注\"\n   git push -u origin main\n   ```\n\n* * *\n\n### 写文章\n\n1. 运行 hexo new \"文章名\"\n2. 在提示的目录打开文件使用markdown语法编辑 具体教程看[markdown教程用法](https://www.runoob.com/markdown/md-tutorial.html)转自菜鸟教程\n3. 之后 clean g s三件套 再来一遍再提交就OK了\n\n* * *\n\n### 归档、分类里面是报错的\n\n1. 检查一下你的yml配置文件\n2. 按照这个[教程](https://blog.csdn.net/weixin_48927364/article/details/123295436)走\n","source":"_posts/Vercel-Github搭建Hexo博客.md","raw":"---\ntitle: Vercel+Github搭建Hexo博客\ndate: 2022-08-13 19:42:54\ntags: [Html,Code,博客]\ncategories: [Code,Html,博客]\ntoc: true\ncover: https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_43_tit2.svg\n---\n\n### 工作原理\n\n+ github是一个代码托管平台，缺点是加载的时候特别慢\n+ vercel完美结局了这个问题，vercel加载速度相对快一些，可以和github绑定，而且根据github储存库实时拉取更新\n+ Hexo一个快速、简洁且高效的博客框架,它支持几条简短的命令发布博客,因此是对于初学者比较友好的博客框架\n\n\n\n<!-- more -->\n\n### 准备工作\n\n- github账号、vercel账号\n- nodejs v12版本以上 、 git\n  \n  > 网站官网：\n  > \n  > > [github官网](https://github.com/)、[vercel官网](https://vercel.com/)\n  > > [git官网](https://git-scm.com/)、[nodejs官网](https://nodejs.org/en/)\n\n* * *\n\n### 创建Vercel项目并拉取\n\n1. 首先进vercel官网，点击 New Project 按钮，然后点击 Browse All Templates 按钮 找到Hexo主题然后 修改项目名 把下面那个框勾掉（那个是创建私有储存库），然后你的github里会自动生成一个项目\n2. 配置git :\n   - 打开git-bush 输入ssh-keygen -t rsa -C \"{{github的电子邮箱地址}}\" 连续 3 次回车，最终会在用户目录下生成个包含公钥私钥等数据的目录 ( 一般是 C:/Users/{{你的用户名}}/.ssh/ ) 将刚复制的内容粘贴到 Key(你的github->setting->SSH) 中，Title 随便写一个，点击保存 ( Add SSH Key ) \n   - 运行下方命令 :\n     \n     ```\n     git config --global user.name \"{{你的 GitHub username}}\"\n     git config --global user.email \"{{你的 GitHub 注册邮箱地址}}\"\n     ssh -T git@github.com # 邮箱地址不用改 如果提示 Are you sure you want to continue connecting (yes/no)? 请输入 yes 并回车。\n     ```\n3. 在本地选一个文件夹 打开git-bash 运行：git clone https://github.com/用户名/仓库名称\n\n* * *\n\n### 更换主题\n\n1. 首先打开[hexo官网](https://hexo.io/themes/) 挑选一个心仪的主题 ，单击图片可以预览网页，点下面文字到github仓库\n   __注意：不要选择indigo这个主题，这个主题有漏洞，配置起来很麻烦，有些主题预览不了的尽量不要选，避免一会的麻烦（作者一开始选的就是indigo）__\n2. 到仓库之后 在主文件夹打开git-bash 然后输入 git clone 你刚才的主题的仓库的网址 themes/主题名\n3. 打开主项目下的 _config.yml 文件 把 theme：lanspace 改为 theme:你的主题名 然后进到 themes文件夹里把landspace文件夹删了（也可以不删）\n\n* * *\n\n### 更改配置\n\n__注意：这一步需要有较好的英文功底__\n\n1. 进入 打开主项目下的 _config.yml 文件  修改\n    __注意：这里冒号后面有空格 我之前就是应为这个找半天不知道报错在哪__\n   \n   ```\n   title: 标题\n   subtitle: 你的个性签名\n   author: 你的名字\n   language: zh-CN\n   # URL\n   url: 这里写你vercel预览的网址，我这边是：https://yzx-blog.vercel.app/\n   ```\n2. 进入你的主题文件夹里面的 _config.yml 文件 修改各项属性 由于每个主题各有不同 大家可以在网上搜索教程\n\n* * *\n\n### 生成网页\n\n1. 万事俱备后再在（这一步其实应该提前做的）\n    cmd运行：\n   \n   ```\n   npm install -g hexo \n   ```\n   \n    主目录运行：\n   \n   ```\n   npm install -g hexo \n   npm install hexo-cli --save\n   npm install hexo-deployer-git --save\n   ```\n   \n    这是在搭建hexo环境\n\n2. 生成网页\n   \n   ```\n   hexo clean\n   hexo g\n   hexo s\n   ```\n   \n    hexo s之后会在http://localhost:4000/显示你的网页 如果这个时候你成功了那么就可以提交到github了\n   \n    __可能的报错：__\n   \n   ```\n   error: RPC failed； curl 28 OpenSSL SSL_read: Connection was reset, errno 10054 fatal: expected\n   ```\n   \n    __解决办法__\n   \n   ```\n   git config --global http.sslVerify \"false\"\n   ```\n\n* * *\n\n### 提交并成功部署博客\n\n1. 主文件夹打开git-bush\n2. 运行:以下代码\n   \n   ```\n   git remote\n   git remote 你vercel生成的那个github仓库网址\n   git add .（可能要尝试两次）\n   git commit -m \"提交的备注\"\n   git push -u origin main\n   ```\n\n* * *\n\n### 写文章\n\n1. 运行 hexo new \"文章名\"\n2. 在提示的目录打开文件使用markdown语法编辑 具体教程看[markdown教程用法](https://www.runoob.com/markdown/md-tutorial.html)转自菜鸟教程\n3. 之后 clean g s三件套 再来一遍再提交就OK了\n\n* * *\n\n### 归档、分类里面是报错的\n\n1. 检查一下你的yml配置文件\n2. 按照这个[教程](https://blog.csdn.net/weixin_48927364/article/details/123295436)走\n","slug":"Vercel-Github搭建Hexo博客","published":1,"updated":"2022-09-10T12:50:01.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7y5wuaj0009eous7fdwcent","content":"<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><ul>\n<li>github是一个代码托管平台，缺点是加载的时候特别慢</li>\n<li>vercel完美结局了这个问题，vercel加载速度相对快一些，可以和github绑定，而且根据github储存库实时拉取更新</li>\n<li>Hexo一个快速、简洁且高效的博客框架,它支持几条简短的命令发布博客,因此是对于初学者比较友好的博客框架</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li><p>github账号、vercel账号</p>\n</li>\n<li><p>nodejs v12版本以上 、 git</p>\n<blockquote>\n<p>网站官网：</p>\n<blockquote>\n<p><a href=\"https://github.com/\">github官网</a>、<a href=\"https://vercel.com/\">vercel官网</a><br><a href=\"https://git-scm.com/\">git官网</a>、<a href=\"https://nodejs.org/en/\">nodejs官网</a></p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h3 id=\"创建Vercel项目并拉取\"><a href=\"#创建Vercel项目并拉取\" class=\"headerlink\" title=\"创建Vercel项目并拉取\"></a>创建Vercel项目并拉取</h3><ol>\n<li>首先进vercel官网，点击 New Project 按钮，然后点击 Browse All Templates 按钮 找到Hexo主题然后 修改项目名 把下面那个框勾掉（那个是创建私有储存库），然后你的github里会自动生成一个项目</li>\n<li>配置git :<ul>\n<li><p>打开git-bush 输入ssh-keygen -t rsa -C ““ 连续 3 次回车，最终会在用户目录下生成个包含公钥私钥等数据的目录 ( 一般是 C:/Users//.ssh/ ) 将刚复制的内容粘贴到 Key(你的github-&gt;setting-&gt;SSH) 中，Title 随便写一个，点击保存 ( Add SSH Key ) </p>\n</li>\n<li><p>运行下方命令 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;&#123;&#123;你的 GitHub username&#125;&#125;&quot;</span><br><span class=\"line\">git config --global user.email &quot;&#123;&#123;你的 GitHub 注册邮箱地址&#125;&#125;&quot;</span><br><span class=\"line\">ssh -T git@github.com # 邮箱地址不用改 如果提示 Are you sure you want to continue connecting (yes&#x2F;no)? 请输入 yes 并回车。</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>在本地选一个文件夹 打开git-bash 运行：git clone <a href=\"https://github.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D%E7%A7%B0\">https://github.com/用户名/仓库名称</a></li>\n</ol>\n<hr>\n<h3 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h3><ol>\n<li>首先打开<a href=\"https://hexo.io/themes/\">hexo官网</a> 挑选一个心仪的主题 ，单击图片可以预览网页，点下面文字到github仓库<br><strong>注意：不要选择indigo这个主题，这个主题有漏洞，配置起来很麻烦，有些主题预览不了的尽量不要选，避免一会的麻烦（作者一开始选的就是indigo）</strong></li>\n<li>到仓库之后 在主文件夹打开git-bash 然后输入 git clone 你刚才的主题的仓库的网址 themes/主题名</li>\n<li>打开主项目下的 _config.yml 文件 把 theme：lanspace 改为 theme:你的主题名 然后进到 themes文件夹里把landspace文件夹删了（也可以不删）</li>\n</ol>\n<hr>\n<h3 id=\"更改配置\"><a href=\"#更改配置\" class=\"headerlink\" title=\"更改配置\"></a>更改配置</h3><p><strong>注意：这一步需要有较好的英文功底</strong></p>\n<ol>\n<li><p>进入 打开主项目下的 _config.yml 文件  修改<br> <strong>注意：这里冒号后面有空格 我之前就是应为这个找半天不知道报错在哪</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 标题</span><br><span class=\"line\">subtitle: 你的个性签名</span><br><span class=\"line\">author: 你的名字</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\"># URL</span><br><span class=\"line\">url: 这里写你vercel预览的网址，我这边是：https:&#x2F;&#x2F;yzx-blog.vercel.app&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li><p>进入你的主题文件夹里面的 _config.yml 文件 修改各项属性 由于每个主题各有不同 大家可以在网上搜索教程</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"生成网页\"><a href=\"#生成网页\" class=\"headerlink\" title=\"生成网页\"></a>生成网页</h3><ol>\n<li><p>万事俱备后再在（这一步其实应该提前做的）<br> cmd运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo </span><br></pre></td></tr></table></figure>\n\n<p> 主目录运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo </span><br><span class=\"line\">npm install hexo-cli --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p> 这是在搭建hexo环境</p>\n</li>\n<li><p>生成网页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p> hexo s之后会在<a href=\"http://localhost:4000/%E6%98%BE%E7%A4%BA%E4%BD%A0%E7%9A%84%E7%BD%91%E9%A1%B5\">http://localhost:4000/显示你的网页</a> 如果这个时候你成功了那么就可以提交到github了</p>\n<p> <strong>可能的报错：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: RPC failed； curl 28 OpenSSL SSL_read: Connection was reset, errno 10054 fatal: expected</span><br></pre></td></tr></table></figure>\n\n<p> <strong>解决办法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<hr>\n<h3 id=\"提交并成功部署博客\"><a href=\"#提交并成功部署博客\" class=\"headerlink\" title=\"提交并成功部署博客\"></a>提交并成功部署博客</h3><ol>\n<li><p>主文件夹打开git-bush</p>\n</li>\n<li><p>运行:以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br><span class=\"line\">git remote 你vercel生成的那个github仓库网址</span><br><span class=\"line\">git add .（可能要尝试两次）</span><br><span class=\"line\">git commit -m &quot;提交的备注&quot;</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<hr>\n<h3 id=\"写文章\"><a href=\"#写文章\" class=\"headerlink\" title=\"写文章\"></a>写文章</h3><ol>\n<li>运行 hexo new “文章名”</li>\n<li>在提示的目录打开文件使用markdown语法编辑 具体教程看<a href=\"https://www.runoob.com/markdown/md-tutorial.html\">markdown教程用法</a>转自菜鸟教程</li>\n<li>之后 clean g s三件套 再来一遍再提交就OK了</li>\n</ol>\n<hr>\n<h3 id=\"归档、分类里面是报错的\"><a href=\"#归档、分类里面是报错的\" class=\"headerlink\" title=\"归档、分类里面是报错的\"></a>归档、分类里面是报错的</h3><ol>\n<li>检查一下你的yml配置文件</li>\n<li>按照这个<a href=\"https://blog.csdn.net/weixin_48927364/article/details/123295436\">教程</a>走</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><ul>\n<li>github是一个代码托管平台，缺点是加载的时候特别慢</li>\n<li>vercel完美结局了这个问题，vercel加载速度相对快一些，可以和github绑定，而且根据github储存库实时拉取更新</li>\n<li>Hexo一个快速、简洁且高效的博客框架,它支持几条简短的命令发布博客,因此是对于初学者比较友好的博客框架</li>\n</ul>","more":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li><p>github账号、vercel账号</p>\n</li>\n<li><p>nodejs v12版本以上 、 git</p>\n<blockquote>\n<p>网站官网：</p>\n<blockquote>\n<p><a href=\"https://github.com/\">github官网</a>、<a href=\"https://vercel.com/\">vercel官网</a><br><a href=\"https://git-scm.com/\">git官网</a>、<a href=\"https://nodejs.org/en/\">nodejs官网</a></p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h3 id=\"创建Vercel项目并拉取\"><a href=\"#创建Vercel项目并拉取\" class=\"headerlink\" title=\"创建Vercel项目并拉取\"></a>创建Vercel项目并拉取</h3><ol>\n<li>首先进vercel官网，点击 New Project 按钮，然后点击 Browse All Templates 按钮 找到Hexo主题然后 修改项目名 把下面那个框勾掉（那个是创建私有储存库），然后你的github里会自动生成一个项目</li>\n<li>配置git :<ul>\n<li><p>打开git-bush 输入ssh-keygen -t rsa -C ““ 连续 3 次回车，最终会在用户目录下生成个包含公钥私钥等数据的目录 ( 一般是 C:/Users//.ssh/ ) 将刚复制的内容粘贴到 Key(你的github-&gt;setting-&gt;SSH) 中，Title 随便写一个，点击保存 ( Add SSH Key ) </p>\n</li>\n<li><p>运行下方命令 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;&#123;&#123;你的 GitHub username&#125;&#125;&quot;</span><br><span class=\"line\">git config --global user.email &quot;&#123;&#123;你的 GitHub 注册邮箱地址&#125;&#125;&quot;</span><br><span class=\"line\">ssh -T git@github.com # 邮箱地址不用改 如果提示 Are you sure you want to continue connecting (yes&#x2F;no)? 请输入 yes 并回车。</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>在本地选一个文件夹 打开git-bash 运行：git clone <a href=\"https://github.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D%E7%A7%B0\">https://github.com/用户名/仓库名称</a></li>\n</ol>\n<hr>\n<h3 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h3><ol>\n<li>首先打开<a href=\"https://hexo.io/themes/\">hexo官网</a> 挑选一个心仪的主题 ，单击图片可以预览网页，点下面文字到github仓库<br><strong>注意：不要选择indigo这个主题，这个主题有漏洞，配置起来很麻烦，有些主题预览不了的尽量不要选，避免一会的麻烦（作者一开始选的就是indigo）</strong></li>\n<li>到仓库之后 在主文件夹打开git-bash 然后输入 git clone 你刚才的主题的仓库的网址 themes/主题名</li>\n<li>打开主项目下的 _config.yml 文件 把 theme：lanspace 改为 theme:你的主题名 然后进到 themes文件夹里把landspace文件夹删了（也可以不删）</li>\n</ol>\n<hr>\n<h3 id=\"更改配置\"><a href=\"#更改配置\" class=\"headerlink\" title=\"更改配置\"></a>更改配置</h3><p><strong>注意：这一步需要有较好的英文功底</strong></p>\n<ol>\n<li><p>进入 打开主项目下的 _config.yml 文件  修改<br> <strong>注意：这里冒号后面有空格 我之前就是应为这个找半天不知道报错在哪</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 标题</span><br><span class=\"line\">subtitle: 你的个性签名</span><br><span class=\"line\">author: 你的名字</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\"># URL</span><br><span class=\"line\">url: 这里写你vercel预览的网址，我这边是：https:&#x2F;&#x2F;yzx-blog.vercel.app&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li><p>进入你的主题文件夹里面的 _config.yml 文件 修改各项属性 由于每个主题各有不同 大家可以在网上搜索教程</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"生成网页\"><a href=\"#生成网页\" class=\"headerlink\" title=\"生成网页\"></a>生成网页</h3><ol>\n<li><p>万事俱备后再在（这一步其实应该提前做的）<br> cmd运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo </span><br></pre></td></tr></table></figure>\n\n<p> 主目录运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo </span><br><span class=\"line\">npm install hexo-cli --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p> 这是在搭建hexo环境</p>\n</li>\n<li><p>生成网页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p> hexo s之后会在<a href=\"http://localhost:4000/%E6%98%BE%E7%A4%BA%E4%BD%A0%E7%9A%84%E7%BD%91%E9%A1%B5\">http://localhost:4000/显示你的网页</a> 如果这个时候你成功了那么就可以提交到github了</p>\n<p> <strong>可能的报错：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: RPC failed； curl 28 OpenSSL SSL_read: Connection was reset, errno 10054 fatal: expected</span><br></pre></td></tr></table></figure>\n\n<p> <strong>解决办法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<hr>\n<h3 id=\"提交并成功部署博客\"><a href=\"#提交并成功部署博客\" class=\"headerlink\" title=\"提交并成功部署博客\"></a>提交并成功部署博客</h3><ol>\n<li><p>主文件夹打开git-bush</p>\n</li>\n<li><p>运行:以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br><span class=\"line\">git remote 你vercel生成的那个github仓库网址</span><br><span class=\"line\">git add .（可能要尝试两次）</span><br><span class=\"line\">git commit -m &quot;提交的备注&quot;</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<hr>\n<h3 id=\"写文章\"><a href=\"#写文章\" class=\"headerlink\" title=\"写文章\"></a>写文章</h3><ol>\n<li>运行 hexo new “文章名”</li>\n<li>在提示的目录打开文件使用markdown语法编辑 具体教程看<a href=\"https://www.runoob.com/markdown/md-tutorial.html\">markdown教程用法</a>转自菜鸟教程</li>\n<li>之后 clean g s三件套 再来一遍再提交就OK了</li>\n</ol>\n<hr>\n<h3 id=\"归档、分类里面是报错的\"><a href=\"#归档、分类里面是报错的\" class=\"headerlink\" title=\"归档、分类里面是报错的\"></a>归档、分类里面是报错的</h3><ol>\n<li>检查一下你的yml配置文件</li>\n<li>按照这个<a href=\"https://blog.csdn.net/weixin_48927364/article/details/123295436\">教程</a>走</li>\n</ol>"},{"title":"博客变更通知","date":"2022-09-10T12:48:00.000Z","toc":true,"cover":"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/09/10_20_56_39_010.webp","_content":"\n这段时间，我的博客之旅可谓是一波三折，显示vercel搭建，indigo主题，然后是next接着尝试了icarus，最后vercel崩了，尝试去用netlify，最后到freenom获取域名，又换到了butterfly主题，稳定下来，还是学到很多的，现在博客网址变成了yzx-blog.tk,也基本尘埃落定，感谢大家对我的支持，谢谢！","source":"_posts/博客变更通知.md","raw":"---\ntitle: 博客变更通知\ndate: 2022-09-10 20:48:00\ntags: 公告\ntoc: true\ncategories: 公告\ncover: https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/09/10_20_56_39_010.webp\n---\n\n这段时间，我的博客之旅可谓是一波三折，显示vercel搭建，indigo主题，然后是next接着尝试了icarus，最后vercel崩了，尝试去用netlify，最后到freenom获取域名，又换到了butterfly主题，稳定下来，还是学到很多的，现在博客网址变成了yzx-blog.tk,也基本尘埃落定，感谢大家对我的支持，谢谢！","slug":"博客变更通知","published":1,"updated":"2022-09-10T12:56:52.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7y5wuak000beousd5hn4tz4","content":"<p>这段时间，我的博客之旅可谓是一波三折，显示vercel搭建，indigo主题，然后是next接着尝试了icarus，最后vercel崩了，尝试去用netlify，最后到freenom获取域名，又换到了butterfly主题，稳定下来，还是学到很多的，现在博客网址变成了yzx-blog.tk,也基本尘埃落定，感谢大家对我的支持，谢谢！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这段时间，我的博客之旅可谓是一波三折，显示vercel搭建，indigo主题，然后是next接着尝试了icarus，最后vercel崩了，尝试去用netlify，最后到freenom获取域名，又换到了butterfly主题，稳定下来，还是学到很多的，现在博客网址变成了yzx-blog.tk,也基本尘埃落定，感谢大家对我的支持，谢谢！</p>\n"},{"title":"requests详解(1)","date":"2022-09-03T11:15:01.000Z","cover":"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/09/3_19_27_12_003.webp","toc":true,"comments":1,"_content":"# 前言\n+ requests是Python中的一个网络请求库，可以用于实现调取api，获取网页源代码等功能\n+ requests一共有很多种请求方式，我今天介绍最常用的2种，他们分别是get、post请求\n\n<!--more-->\n\n***\n\n# get请求\n### get请求特点概述\n\n+ get请求是 __获取数据__(不建议用get提交数据)\n+ 请求的参数将以````?name:val````的形式呈现，__不安全__\n+ 请求的 __数据量有限制__  ，一般是 __8kb__\n+ 速度快\n\n### get请求基本使用方法\n\n- 参数讲解\n    第一个参数为请求网址，第二个是请求头，第三个是请求数据\n    ```` Python\n    response=requests.get(url,headers=head,params=params)\n    ````\n- 请求头的一般写法\n    这是应对一般的反爬虫网站的措施，请求头的数据量有限制\n    ```` Python\n    head = {\n        \"User-Agent\": \"Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11\"\n    }\n    ````\n    应用实例：\n    ![](https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/09/3_19_49_23_get%E8%AF%B7%E6%B1%82web%E5%AE%9E%E4%BE%8B.png)\n- 数据的格式\n    数据以字典的方式呈现，以下是数据格式的实例：\n    ```` Python\n    params = {\n        'type': 'python',\n        'code': 'print(1)',\n    }\n    ````\n    一般在网址上以?name1=val1&name2=val2形式出现,有数据量限制\n\n***\n\n# Post请求\n\n### Post请求特点概述\n\n+ post请求是 __提交数据__\n+ __不限制__ 提交数据的 __大小__\n+ __速度慢__ ,但是 __安全__\n\n### Post请求方法\n- 参数讲解：\n    url为网址，headers请求头和上面的get请求一样，data是字典数据请求和get的params一样，json是json数据请求\n    + 方法一：\n    ```` Python\n    response=requests.post(url,headers=head,data=payload)\n    ````\n    + 方法二：\n    ```` Python\n    response=requests.post(url,headers=head,json=payload)\n    ````\n***\n\n# 其余的参数\n+ ````requests.post/get(url,headers=head,timeout=second)````:\n  设置接口连接的最大时间,单位为秒（超过该时间会抛出超时错误）\n+ ````requests.post/get(url,headers=head,verify=False)````\n  ````verify=True````(默认): 检查SSL证书认证  ````verify=False````(常用): 忽略SSl证书认证\n\n***\n\n# 其余的功能\n+ ````res.status_code```` 获取状态码\n+ ````res.request.headers```` 获取请求头\n+ ````res.headers```` 获取响应头\n+ ````res.content```` 获取响应内容的二进制\n+ ````res.text```` url对应的页面内容，也就是网页源代码\n+ ````res.apparent_encoding```` 猜测编码\n+ ````res.json()```` 返回json数据","source":"_posts/requests详解(1).md","raw":"---\ntitle: requests详解(1)\ndate: 2022-09-03 19:15:01\ntags: [Code,Python,Spider爬虫,类库]\ncategories: [Code,Python,类库,Spider爬虫,requests]\ncover: https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/09/3_19_27_12_003.webp\ntoc: true\ncomments: true\n---\n# 前言\n+ requests是Python中的一个网络请求库，可以用于实现调取api，获取网页源代码等功能\n+ requests一共有很多种请求方式，我今天介绍最常用的2种，他们分别是get、post请求\n\n<!--more-->\n\n***\n\n# get请求\n### get请求特点概述\n\n+ get请求是 __获取数据__(不建议用get提交数据)\n+ 请求的参数将以````?name:val````的形式呈现，__不安全__\n+ 请求的 __数据量有限制__  ，一般是 __8kb__\n+ 速度快\n\n### get请求基本使用方法\n\n- 参数讲解\n    第一个参数为请求网址，第二个是请求头，第三个是请求数据\n    ```` Python\n    response=requests.get(url,headers=head,params=params)\n    ````\n- 请求头的一般写法\n    这是应对一般的反爬虫网站的措施，请求头的数据量有限制\n    ```` Python\n    head = {\n        \"User-Agent\": \"Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11\"\n    }\n    ````\n    应用实例：\n    ![](https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/09/3_19_49_23_get%E8%AF%B7%E6%B1%82web%E5%AE%9E%E4%BE%8B.png)\n- 数据的格式\n    数据以字典的方式呈现，以下是数据格式的实例：\n    ```` Python\n    params = {\n        'type': 'python',\n        'code': 'print(1)',\n    }\n    ````\n    一般在网址上以?name1=val1&name2=val2形式出现,有数据量限制\n\n***\n\n# Post请求\n\n### Post请求特点概述\n\n+ post请求是 __提交数据__\n+ __不限制__ 提交数据的 __大小__\n+ __速度慢__ ,但是 __安全__\n\n### Post请求方法\n- 参数讲解：\n    url为网址，headers请求头和上面的get请求一样，data是字典数据请求和get的params一样，json是json数据请求\n    + 方法一：\n    ```` Python\n    response=requests.post(url,headers=head,data=payload)\n    ````\n    + 方法二：\n    ```` Python\n    response=requests.post(url,headers=head,json=payload)\n    ````\n***\n\n# 其余的参数\n+ ````requests.post/get(url,headers=head,timeout=second)````:\n  设置接口连接的最大时间,单位为秒（超过该时间会抛出超时错误）\n+ ````requests.post/get(url,headers=head,verify=False)````\n  ````verify=True````(默认): 检查SSL证书认证  ````verify=False````(常用): 忽略SSl证书认证\n\n***\n\n# 其余的功能\n+ ````res.status_code```` 获取状态码\n+ ````res.request.headers```` 获取请求头\n+ ````res.headers```` 获取响应头\n+ ````res.content```` 获取响应内容的二进制\n+ ````res.text```` url对应的页面内容，也就是网页源代码\n+ ````res.apparent_encoding```` 猜测编码\n+ ````res.json()```` 返回json数据","slug":"requests详解(1)","published":1,"updated":"2022-09-06T11:05:47.238Z","layout":"post","photos":[],"link":"","_id":"cl7y5wuan000eeoushhpp40s4","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li>requests是Python中的一个网络请求库，可以用于实现调取api，获取网页源代码等功能</li>\n<li>requests一共有很多种请求方式，我今天介绍最常用的2种，他们分别是get、post请求</li>\n</ul>\n<span id=\"more\"></span>\n\n<hr>\n<h1 id=\"get请求\"><a href=\"#get请求\" class=\"headerlink\" title=\"get请求\"></a>get请求</h1><h3 id=\"get请求特点概述\"><a href=\"#get请求特点概述\" class=\"headerlink\" title=\"get请求特点概述\"></a>get请求特点概述</h3><ul>\n<li>get请求是 <strong>获取数据</strong>(不建议用get提交数据)</li>\n<li>请求的参数将以<code>?name:val</code>的形式呈现，<strong>不安全</strong></li>\n<li>请求的 <strong>数据量有限制</strong>  ，一般是 <strong>8kb</strong></li>\n<li>速度快</li>\n</ul>\n<h3 id=\"get请求基本使用方法\"><a href=\"#get请求基本使用方法\" class=\"headerlink\" title=\"get请求基本使用方法\"></a>get请求基本使用方法</h3><ul>\n<li>参数讲解<br>  第一个参数为请求网址，第二个是请求头，第三个是请求数据  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response=requests.get(url,headers=head,params=params)</span><br></pre></td></tr></table></figure></li>\n<li>请求头的一般写法<br>  这是应对一般的反爬虫网站的措施，请求头的数据量有限制  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  应用实例：<br>  <img src=\"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/09/3_19_49_23_get%E8%AF%B7%E6%B1%82web%E5%AE%9E%E4%BE%8B.png\"></li>\n<li>数据的格式<br>  数据以字典的方式呈现，以下是数据格式的实例：  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">params = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;type&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;code&#x27;</span>: <span class=\"string\">&#x27;print(1)&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  一般在网址上以?name1=val1&amp;name2=val2形式出现,有数据量限制</li>\n</ul>\n<hr>\n<h1 id=\"Post请求\"><a href=\"#Post请求\" class=\"headerlink\" title=\"Post请求\"></a>Post请求</h1><h3 id=\"Post请求特点概述\"><a href=\"#Post请求特点概述\" class=\"headerlink\" title=\"Post请求特点概述\"></a>Post请求特点概述</h3><ul>\n<li>post请求是 <strong>提交数据</strong></li>\n<li><strong>不限制</strong> 提交数据的 <strong>大小</strong></li>\n<li><strong>速度慢</strong> ,但是 <strong>安全</strong></li>\n</ul>\n<h3 id=\"Post请求方法\"><a href=\"#Post请求方法\" class=\"headerlink\" title=\"Post请求方法\"></a>Post请求方法</h3><ul>\n<li>参数讲解：<br>  url为网址，headers请求头和上面的get请求一样，data是字典数据请求和get的params一样，json是json数据请求<ul>\n<li>方法一：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response=requests.post(url,headers=head,data=payload)</span><br></pre></td></tr></table></figure></li>\n<li>方法二：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response=requests.post(url,headers=head,json=payload)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"其余的参数\"><a href=\"#其余的参数\" class=\"headerlink\" title=\"其余的参数\"></a>其余的参数</h1><ul>\n<li><code>requests.post/get(url,headers=head,timeout=second)</code>:<br>设置接口连接的最大时间,单位为秒（超过该时间会抛出超时错误）</li>\n<li><code>requests.post/get(url,headers=head,verify=False)</code><br><code>verify=True</code>(默认): 检查SSL证书认证  <code>verify=False</code>(常用): 忽略SSl证书认证</li>\n</ul>\n<hr>\n<h1 id=\"其余的功能\"><a href=\"#其余的功能\" class=\"headerlink\" title=\"其余的功能\"></a>其余的功能</h1><ul>\n<li><code>res.status_code</code> 获取状态码</li>\n<li><code>res.request.headers</code> 获取请求头</li>\n<li><code>res.headers</code> 获取响应头</li>\n<li><code>res.content</code> 获取响应内容的二进制</li>\n<li><code>res.text</code> url对应的页面内容，也就是网页源代码</li>\n<li><code>res.apparent_encoding</code> 猜测编码</li>\n<li><code>res.json()</code> 返回json数据</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li>requests是Python中的一个网络请求库，可以用于实现调取api，获取网页源代码等功能</li>\n<li>requests一共有很多种请求方式，我今天介绍最常用的2种，他们分别是get、post请求</li>\n</ul>","more":"<hr>\n<h1 id=\"get请求\"><a href=\"#get请求\" class=\"headerlink\" title=\"get请求\"></a>get请求</h1><h3 id=\"get请求特点概述\"><a href=\"#get请求特点概述\" class=\"headerlink\" title=\"get请求特点概述\"></a>get请求特点概述</h3><ul>\n<li>get请求是 <strong>获取数据</strong>(不建议用get提交数据)</li>\n<li>请求的参数将以<code>?name:val</code>的形式呈现，<strong>不安全</strong></li>\n<li>请求的 <strong>数据量有限制</strong>  ，一般是 <strong>8kb</strong></li>\n<li>速度快</li>\n</ul>\n<h3 id=\"get请求基本使用方法\"><a href=\"#get请求基本使用方法\" class=\"headerlink\" title=\"get请求基本使用方法\"></a>get请求基本使用方法</h3><ul>\n<li>参数讲解<br>  第一个参数为请求网址，第二个是请求头，第三个是请求数据  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response=requests.get(url,headers=head,params=params)</span><br></pre></td></tr></table></figure></li>\n<li>请求头的一般写法<br>  这是应对一般的反爬虫网站的措施，请求头的数据量有限制  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">head = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  应用实例：<br>  <img src=\"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/09/3_19_49_23_get%E8%AF%B7%E6%B1%82web%E5%AE%9E%E4%BE%8B.png\"></li>\n<li>数据的格式<br>  数据以字典的方式呈现，以下是数据格式的实例：  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">params = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;type&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;code&#x27;</span>: <span class=\"string\">&#x27;print(1)&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  一般在网址上以?name1=val1&amp;name2=val2形式出现,有数据量限制</li>\n</ul>\n<hr>\n<h1 id=\"Post请求\"><a href=\"#Post请求\" class=\"headerlink\" title=\"Post请求\"></a>Post请求</h1><h3 id=\"Post请求特点概述\"><a href=\"#Post请求特点概述\" class=\"headerlink\" title=\"Post请求特点概述\"></a>Post请求特点概述</h3><ul>\n<li>post请求是 <strong>提交数据</strong></li>\n<li><strong>不限制</strong> 提交数据的 <strong>大小</strong></li>\n<li><strong>速度慢</strong> ,但是 <strong>安全</strong></li>\n</ul>\n<h3 id=\"Post请求方法\"><a href=\"#Post请求方法\" class=\"headerlink\" title=\"Post请求方法\"></a>Post请求方法</h3><ul>\n<li>参数讲解：<br>  url为网址，headers请求头和上面的get请求一样，data是字典数据请求和get的params一样，json是json数据请求<ul>\n<li>方法一：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response=requests.post(url,headers=head,data=payload)</span><br></pre></td></tr></table></figure></li>\n<li>方法二：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response=requests.post(url,headers=head,json=payload)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"其余的参数\"><a href=\"#其余的参数\" class=\"headerlink\" title=\"其余的参数\"></a>其余的参数</h1><ul>\n<li><code>requests.post/get(url,headers=head,timeout=second)</code>:<br>设置接口连接的最大时间,单位为秒（超过该时间会抛出超时错误）</li>\n<li><code>requests.post/get(url,headers=head,verify=False)</code><br><code>verify=True</code>(默认): 检查SSL证书认证  <code>verify=False</code>(常用): 忽略SSl证书认证</li>\n</ul>\n<hr>\n<h1 id=\"其余的功能\"><a href=\"#其余的功能\" class=\"headerlink\" title=\"其余的功能\"></a>其余的功能</h1><ul>\n<li><code>res.status_code</code> 获取状态码</li>\n<li><code>res.request.headers</code> 获取请求头</li>\n<li><code>res.headers</code> 获取响应头</li>\n<li><code>res.content</code> 获取响应内容的二进制</li>\n<li><code>res.text</code> url对应的页面内容，也就是网页源代码</li>\n<li><code>res.apparent_encoding</code> 猜测编码</li>\n<li><code>res.json()</code> 返回json数据</li>\n</ul>"},{"title":"我的博客搭建成功","date":"2022-08-13T03:48:56.000Z","type":"categories","toc":true,"cover":"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_43_tit1.svg","_content":"\n个人博客已搭建完成了，后续发布，敬请关注。\n\n 特此鸣谢C站吴宇航对我搭建博客的帮助 ：https://wyh-blog.vercel.app/\n","source":"_posts/我的博客搭建成功.md","raw":"---\ntitle: 我的博客搭建成功\ndate: 2022-08-13 11:48:56\ntags: 公告\ntype: \"categories\"\ncategories: 公告\ntoc: true\ncover: https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_43_tit1.svg\n---\n\n个人博客已搭建完成了，后续发布，敬请关注。\n\n 特此鸣谢C站吴宇航对我搭建博客的帮助 ：https://wyh-blog.vercel.app/\n","slug":"我的博客搭建成功","published":1,"updated":"2022-09-03T05:11:23.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7y5wuao000feouseyl1gf0d","content":"<p>个人博客已搭建完成了，后续发布，敬请关注。</p>\n<p> 特此鸣谢C站吴宇航对我搭建博客的帮助 ：<a href=\"https://wyh-blog.vercel.app/\">https://wyh-blog.vercel.app/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>个人博客已搭建完成了，后续发布，敬请关注。</p>\n<p> 特此鸣谢C站吴宇航对我搭建博客的帮助 ：<a href=\"https://wyh-blog.vercel.app/\">https://wyh-blog.vercel.app/</a></p>\n"},{"title":"栈与队列","date":"2022-08-14T09:43:06.000Z","toc":true,"cover":"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_43_tit3.svg","_content":"\n#### 前言\n\n- 栈和队列是非常常用的数据结构，可以解决很多问题\n- 栈：先进后出 ； 队列：先进先出 ，这就是它们的最大特点\n- 本篇文章我将介绍Python和C++中的栈与队列，以及它们的基本操作\n  \n  <!--more-->\n\n#### 栈(stack)\n\n- 栈(stack)，又名堆栈，是一种先进后出的数据结构\n- 典型应用：后缀表达式的求值、括号匹配问题\n\n#### 栈的操作：\n\n- 入栈：push(content)\n- 出栈：pop()\n- 获取栈顶元素：top()\n- 栈的大小：size()\n- 栈是否为空： empty()\n- 下面是leetcode官网的动图\n  ![加载错误](https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_0_出入栈.gif)\n\n#### Python实现栈\n\n在C++的STL中有封装好的栈，但是Python没有，以下是Python我封装的栈的类\n\n```Python\nclass Stack():\n    def __init__(self):\n        self.__array = []\n    def push(self,content):\n        self.__array.append(content)\n    def size(self):\n        return len(self.__array)\n    def top(self):\n        return self.__array[self.size()-1]\n    def pop(self):\n        del self.__array[self.size()-1]\n    def empty(self):\n        if(self.size()<=0):\n            return True\n        return False\n    def out(self):\n        for i in range(len(self.__array)):\n            print(self.__array[i],end=\" \")\n        print(\"\\n\")\n```\n\n#### C++.STL-栈\n\n- 执行以下代码\n  \n  ```C++\n  #include <queue>\n  #include <bits/stdc++.h>\n  using namespace std;\n  int main(){\n    queue<int> mqu;\n    mqu.push(1);\n    mqu.push(2);\n    mqu.push(3);\n    mqu.pop();\n    cout << mqu.top()<< \" \" << mqu.size() << endl ;\n    mqu.pop();\n    mqu.pop();\n    cout << mqu.empty();\n    return 0;\n  }\n  ```\n\n- 输出：\n  \n  ```\n  2 2 true\n  ```\n  \n  #### 后缀表达式的求值\n\n- 后缀表达式：把运算符后置的表达式\n\n- 中缀表达式：1+2+3\n\n- 优点：方便计算机识别计算，可以省略括号\n\n- 栗子：545*+5/ 它以中缀表达式是这样表达的： (5+4*5)/5\n\n- C++代码\n  \n  ```C++\n  #include <iostream>\n  #include <stack>\n  using namespace std;\n  /*\n  Evaluate postfix expression\n  82/       128*+     545*+5/\n  */ \n  stack<int> mst;\n  void postFixEvaluation(string s){\n    for(int i=0;i<s.size();i++){\n        if(s.at(i)>='0'&&s.at(i)<='9')\n            mst.push((int)(s.at(i)-'0'));\n        else{\n            int num2 = mst.top();\n            mst.pop();\n            int num1 = mst.top();\n            mst.pop();\n  \n            if(s.at(i)=='+')\n                mst.push(num1+num2);\n            else if(s.at(i)=='-')\n                mst.push(num1-num2);\n            else if(s.at(i)=='*')\n                mst.push(num1*num2);\n            else if(s.at(i)=='/')\n                mst.push(num1/num2);\n        }\n    }\n  }\n  int main(){\n    string s=\"128*+\";\n    postFixEvaluation(s);\n    cout << mst.top();\n    return 0; \n  }\n  ```\n\n- Python代码\n  \n  ```Python\n  class Stack():\n    def __init__(self):\n        self.__array = []\n    def push(self,content):\n        self.__array.append(content)\n    def size(self):\n        return len(self.__array)\n    def top(self):\n        return self.__array[self.size()-1]\n    def pop(self):\n        del self.__array[self.size()-1]\n    def empty(self):\n        if(self.size()<=0):\n            return True\n        return False\n    def out(self):\n        for i in range(len(self.__array)):\n            print(self.__array[i],end=\" \")\n        print(\"\\n\")\n  s=\"545*+5/\"\n  mst=Stack()\n  for i in range(len(s)):\n  \n    if ord(s[i])>=ord(\"0\") and ord(s[i])<=ord(\"9\"):\n        mst.push(ord(s[i])-ord('0'))\n    else:\n        num2 = mst.top();\n        mst.pop();\n        num1 = mst.top();\n        mst.pop();\n        if s[i]=='+' :\n            mst.push(num1+num2);\n        elif s[i]=='-' :\n            mst.push(num1-num2);\n        elif s[i]=='*' :\n            mst.push(num1*num2);\n        elif s[i]=='/' :\n            mst.push(num1/num2);\n  print(mst.top())    \n  ```\n\n* * *\n\n#### 队列(Queue)\n\n- 队列(Queue)，又名堆栈，是一种先进先出的数据结构\n\n- 典型应用：迷宫问题、最短路径、岛屿问题等\n  \n  #### 队列的操作：\n\n- 入队：push(content)\n\n- 出队：pop()\n\n- 获取队顶元素：front()//最先进队的\n\n- 获取队头元素：back()//最后进队的\n\n- 队列的大小：size()\n\n- 队列是否为空： empty()\n\n- 下面是leetcode官网的动图\n  ![加载错误](https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_0_出入队.gif)\n  \n  #### Python实现队列\n  \n  在C++的STL中有封装好的栈，但是Python没有，以下是Python我封装的栈的类\n  \n  ```Python\n  class Queue():\n    def __init__(self):\n        self.__array = []\n    def push(self,content):\n        self.__array.append(content)\n    def size(self):\n        return len(self.__array)\n    def pop(self):\n        for i in range(self.size()-1):\n            self.__array[i]=self.__array[i+1]\n    def front(self):\n        return self.__array[0]\n    def back(self):\n        return self.__array[self.size()-1]\n    def empty(self):\n        if self.size()<=0:\n            return True\n        return False\n    def out(self):\n        for i in range(self.size()):\n            print(self.__array[i],end=\" \")\n        print(\"\\n\") \n  ```\n  \n  #### 迷宫问题\n  \n  1为可以走 0为不可以走\n  问从列表的[0,0]走到[n,n]最少需要多少步，只能走上下左右\n\n- Python代码\n  \n  ```Python\n  class Queue():\n    def __init__(self):\n        self.__array = []\n    def push(self,content):\n        self.__array.append(content)\n    def size(self):\n        return len(self.__array)\n    def pop(self):\n        for i in range(self.size()-1):\n            self.__array[i]=self.__array[i+1]\n    def front(self):\n        return self.__array[0]\n    def back(self):\n        return self.__array[self.size()-1]\n    def empty(self):\n        if self.size()<=0:\n            return True\n        return False\n    def out(self):\n        for i in range(self.size()):\n            print(self.__array[i],end=\" \")\n        print(\"\\n\") \n  info=[\n    [1,1,0,0,0],\n    [0,1,1,1,1],\n    [0,1,0,1,0],\n    [0,1,0,1,0],\n    [0,1,0,1,1]\n  ]\n  r,c=4,4\n\n\nwayx,wayy = [0,-1,0,1],[-1,0,1,0]\n\nmqu=Queue()\n\nmqu.push([0,0,0])\ninfo[0][0] = 1\n\nisFind=False\n\nwhile mqu.empty()==0 and isFind!=True:\n    top=mqu.front()\n    mqu.pop()\n    for i in range(4):\n        nx = top[0]+ wayx[i]\n        ny = top[1]+ wayy[i]\n        if nx >= 0 and nx <= r and ny >= 0 and ny <= c and info[nx][ny]==1:\n            mqu.push([nx,ny,top[2]+1])\n            info[nx][ny] = 0;\n            if nx == r and ny == c:\n                print(top[2]+1)\n                isFind=True\n                break\nif isFind==False:\n    print(\"Can't find anyway\")            \n\n```\n\n\n","source":"_posts/栈与队列.md","raw":"---\n\ntitle: 栈与队列\ndate: 2022-08-14 17:43:06\ntags: [C++,Python,数据结构,Code]\ntoc: true\ncategories: [Code,C++,数据结构]\ncover: https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_43_tit3.svg\n\n---\n\n#### 前言\n\n- 栈和队列是非常常用的数据结构，可以解决很多问题\n- 栈：先进后出 ； 队列：先进先出 ，这就是它们的最大特点\n- 本篇文章我将介绍Python和C++中的栈与队列，以及它们的基本操作\n  \n  <!--more-->\n\n#### 栈(stack)\n\n- 栈(stack)，又名堆栈，是一种先进后出的数据结构\n- 典型应用：后缀表达式的求值、括号匹配问题\n\n#### 栈的操作：\n\n- 入栈：push(content)\n- 出栈：pop()\n- 获取栈顶元素：top()\n- 栈的大小：size()\n- 栈是否为空： empty()\n- 下面是leetcode官网的动图\n  ![加载错误](https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_0_出入栈.gif)\n\n#### Python实现栈\n\n在C++的STL中有封装好的栈，但是Python没有，以下是Python我封装的栈的类\n\n```Python\nclass Stack():\n    def __init__(self):\n        self.__array = []\n    def push(self,content):\n        self.__array.append(content)\n    def size(self):\n        return len(self.__array)\n    def top(self):\n        return self.__array[self.size()-1]\n    def pop(self):\n        del self.__array[self.size()-1]\n    def empty(self):\n        if(self.size()<=0):\n            return True\n        return False\n    def out(self):\n        for i in range(len(self.__array)):\n            print(self.__array[i],end=\" \")\n        print(\"\\n\")\n```\n\n#### C++.STL-栈\n\n- 执行以下代码\n  \n  ```C++\n  #include <queue>\n  #include <bits/stdc++.h>\n  using namespace std;\n  int main(){\n    queue<int> mqu;\n    mqu.push(1);\n    mqu.push(2);\n    mqu.push(3);\n    mqu.pop();\n    cout << mqu.top()<< \" \" << mqu.size() << endl ;\n    mqu.pop();\n    mqu.pop();\n    cout << mqu.empty();\n    return 0;\n  }\n  ```\n\n- 输出：\n  \n  ```\n  2 2 true\n  ```\n  \n  #### 后缀表达式的求值\n\n- 后缀表达式：把运算符后置的表达式\n\n- 中缀表达式：1+2+3\n\n- 优点：方便计算机识别计算，可以省略括号\n\n- 栗子：545*+5/ 它以中缀表达式是这样表达的： (5+4*5)/5\n\n- C++代码\n  \n  ```C++\n  #include <iostream>\n  #include <stack>\n  using namespace std;\n  /*\n  Evaluate postfix expression\n  82/       128*+     545*+5/\n  */ \n  stack<int> mst;\n  void postFixEvaluation(string s){\n    for(int i=0;i<s.size();i++){\n        if(s.at(i)>='0'&&s.at(i)<='9')\n            mst.push((int)(s.at(i)-'0'));\n        else{\n            int num2 = mst.top();\n            mst.pop();\n            int num1 = mst.top();\n            mst.pop();\n  \n            if(s.at(i)=='+')\n                mst.push(num1+num2);\n            else if(s.at(i)=='-')\n                mst.push(num1-num2);\n            else if(s.at(i)=='*')\n                mst.push(num1*num2);\n            else if(s.at(i)=='/')\n                mst.push(num1/num2);\n        }\n    }\n  }\n  int main(){\n    string s=\"128*+\";\n    postFixEvaluation(s);\n    cout << mst.top();\n    return 0; \n  }\n  ```\n\n- Python代码\n  \n  ```Python\n  class Stack():\n    def __init__(self):\n        self.__array = []\n    def push(self,content):\n        self.__array.append(content)\n    def size(self):\n        return len(self.__array)\n    def top(self):\n        return self.__array[self.size()-1]\n    def pop(self):\n        del self.__array[self.size()-1]\n    def empty(self):\n        if(self.size()<=0):\n            return True\n        return False\n    def out(self):\n        for i in range(len(self.__array)):\n            print(self.__array[i],end=\" \")\n        print(\"\\n\")\n  s=\"545*+5/\"\n  mst=Stack()\n  for i in range(len(s)):\n  \n    if ord(s[i])>=ord(\"0\") and ord(s[i])<=ord(\"9\"):\n        mst.push(ord(s[i])-ord('0'))\n    else:\n        num2 = mst.top();\n        mst.pop();\n        num1 = mst.top();\n        mst.pop();\n        if s[i]=='+' :\n            mst.push(num1+num2);\n        elif s[i]=='-' :\n            mst.push(num1-num2);\n        elif s[i]=='*' :\n            mst.push(num1*num2);\n        elif s[i]=='/' :\n            mst.push(num1/num2);\n  print(mst.top())    \n  ```\n\n* * *\n\n#### 队列(Queue)\n\n- 队列(Queue)，又名堆栈，是一种先进先出的数据结构\n\n- 典型应用：迷宫问题、最短路径、岛屿问题等\n  \n  #### 队列的操作：\n\n- 入队：push(content)\n\n- 出队：pop()\n\n- 获取队顶元素：front()//最先进队的\n\n- 获取队头元素：back()//最后进队的\n\n- 队列的大小：size()\n\n- 队列是否为空： empty()\n\n- 下面是leetcode官网的动图\n  ![加载错误](https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_0_出入队.gif)\n  \n  #### Python实现队列\n  \n  在C++的STL中有封装好的栈，但是Python没有，以下是Python我封装的栈的类\n  \n  ```Python\n  class Queue():\n    def __init__(self):\n        self.__array = []\n    def push(self,content):\n        self.__array.append(content)\n    def size(self):\n        return len(self.__array)\n    def pop(self):\n        for i in range(self.size()-1):\n            self.__array[i]=self.__array[i+1]\n    def front(self):\n        return self.__array[0]\n    def back(self):\n        return self.__array[self.size()-1]\n    def empty(self):\n        if self.size()<=0:\n            return True\n        return False\n    def out(self):\n        for i in range(self.size()):\n            print(self.__array[i],end=\" \")\n        print(\"\\n\") \n  ```\n  \n  #### 迷宫问题\n  \n  1为可以走 0为不可以走\n  问从列表的[0,0]走到[n,n]最少需要多少步，只能走上下左右\n\n- Python代码\n  \n  ```Python\n  class Queue():\n    def __init__(self):\n        self.__array = []\n    def push(self,content):\n        self.__array.append(content)\n    def size(self):\n        return len(self.__array)\n    def pop(self):\n        for i in range(self.size()-1):\n            self.__array[i]=self.__array[i+1]\n    def front(self):\n        return self.__array[0]\n    def back(self):\n        return self.__array[self.size()-1]\n    def empty(self):\n        if self.size()<=0:\n            return True\n        return False\n    def out(self):\n        for i in range(self.size()):\n            print(self.__array[i],end=\" \")\n        print(\"\\n\") \n  info=[\n    [1,1,0,0,0],\n    [0,1,1,1,1],\n    [0,1,0,1,0],\n    [0,1,0,1,0],\n    [0,1,0,1,1]\n  ]\n  r,c=4,4\n\n\nwayx,wayy = [0,-1,0,1],[-1,0,1,0]\n\nmqu=Queue()\n\nmqu.push([0,0,0])\ninfo[0][0] = 1\n\nisFind=False\n\nwhile mqu.empty()==0 and isFind!=True:\n    top=mqu.front()\n    mqu.pop()\n    for i in range(4):\n        nx = top[0]+ wayx[i]\n        ny = top[1]+ wayy[i]\n        if nx >= 0 and nx <= r and ny >= 0 and ny <= c and info[nx][ny]==1:\n            mqu.push([nx,ny,top[2]+1])\n            info[nx][ny] = 0;\n            if nx == r and ny == c:\n                print(top[2]+1)\n                isFind=True\n                break\nif isFind==False:\n    print(\"Can't find anyway\")            \n\n```\n\n\n","slug":"栈与队列","published":1,"updated":"2022-09-03T07:04:30.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7y5wuap000ieous9upkfpl8","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><ul>\n<li><p>栈和队列是非常常用的数据结构，可以解决很多问题</p>\n</li>\n<li><p>栈：先进后出 ； 队列：先进先出 ，这就是它们的最大特点</p>\n</li>\n<li><p>本篇文章我将介绍Python和C++中的栈与队列，以及它们的基本操作</p>\n<span id=\"more\"></span>\n\n</li>\n</ul>\n<h4 id=\"栈-stack\"><a href=\"#栈-stack\" class=\"headerlink\" title=\"栈(stack)\"></a>栈(stack)</h4><ul>\n<li>栈(stack)，又名堆栈，是一种先进后出的数据结构</li>\n<li>典型应用：后缀表达式的求值、括号匹配问题</li>\n</ul>\n<h4 id=\"栈的操作：\"><a href=\"#栈的操作：\" class=\"headerlink\" title=\"栈的操作：\"></a>栈的操作：</h4><ul>\n<li>入栈：push(content)</li>\n<li>出栈：pop()</li>\n<li>获取栈顶元素：top()</li>\n<li>栈的大小：size()</li>\n<li>栈是否为空： empty()</li>\n<li>下面是leetcode官网的动图<br><img src=\"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_0_%E5%87%BA%E5%85%A5%E6%A0%88.gif\" alt=\"加载错误\"></li>\n</ul>\n<h4 id=\"Python实现栈\"><a href=\"#Python实现栈\" class=\"headerlink\" title=\"Python实现栈\"></a>Python实现栈</h4><p>在C++的STL中有封装好的栈，但是Python没有，以下是Python我封装的栈的类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>():</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.__array = []</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self,content</span>):</span></span><br><span class=\"line\">        self.__array.append(content)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">size</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.__array)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__array[self.size()-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">del</span> self.__array[self.size()-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.size()&lt;=<span class=\"number\">0</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">out</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(self.__array)):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(self.__array[i],end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"C-STL-栈\"><a href=\"#C-STL-栈\" class=\"headerlink\" title=\"C++.STL-栈\"></a>C++.STL-栈</h4><ul>\n<li><p>执行以下代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  queue&lt;<span class=\"keyword\">int</span>&gt; mqu;</span><br><span class=\"line\">  mqu.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  mqu.<span class=\"built_in\">push</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  mqu.<span class=\"built_in\">push</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">  mqu.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">  cout &lt;&lt; mqu.<span class=\"built_in\">top</span>()&lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; mqu.<span class=\"built_in\">size</span>() &lt;&lt; endl ;</span><br><span class=\"line\">  mqu.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">  mqu.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">  cout &lt;&lt; mqu.<span class=\"built_in\">empty</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 2 true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"后缀表达式的求值\"><a href=\"#后缀表达式的求值\" class=\"headerlink\" title=\"后缀表达式的求值\"></a>后缀表达式的求值</h4></li>\n<li><p>后缀表达式：把运算符后置的表达式</p>\n</li>\n<li><p>中缀表达式：1+2+3</p>\n</li>\n<li><p>优点：方便计算机识别计算，可以省略括号</p>\n</li>\n<li><p>栗子：545*+5/ 它以中缀表达式是这样表达的： (5+4*5)/5</p>\n</li>\n<li><p>C++代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Evaluate postfix expression</span></span><br><span class=\"line\"><span class=\"comment\">82/       128*+     545*+5/</span></span><br><span class=\"line\"><span class=\"comment\">*/</span> </span><br><span class=\"line\">stack&lt;<span class=\"keyword\">int</span>&gt; mst;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">postFixEvaluation</span><span class=\"params\">(string s)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(s.<span class=\"built_in\">at</span>(i)&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;s.<span class=\"built_in\">at</span>(i)&lt;=<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">          mst.<span class=\"built_in\">push</span>((<span class=\"keyword\">int</span>)(s.<span class=\"built_in\">at</span>(i)-<span class=\"string\">&#x27;0&#x27;</span>));</span><br><span class=\"line\">      <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> num2 = mst.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">          mst.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">          <span class=\"keyword\">int</span> num1 = mst.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">          mst.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(s.<span class=\"built_in\">at</span>(i)==<span class=\"string\">&#x27;+&#x27;</span>)</span><br><span class=\"line\">              mst.<span class=\"built_in\">push</span>(num1+num2);</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.<span class=\"built_in\">at</span>(i)==<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">              mst.<span class=\"built_in\">push</span>(num1-num2);</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.<span class=\"built_in\">at</span>(i)==<span class=\"string\">&#x27;*&#x27;</span>)</span><br><span class=\"line\">              mst.<span class=\"built_in\">push</span>(num1*num2);</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.<span class=\"built_in\">at</span>(i)==<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">              mst.<span class=\"built_in\">push</span>(num1/num2);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  string s=<span class=\"string\">&quot;128*+&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">postFixEvaluation</span>(s);</span><br><span class=\"line\">  cout &lt;&lt; mst.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Python代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>():</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      self.__array = []</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self,content</span>):</span></span><br><span class=\"line\">      self.__array.append(content)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">size</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.__array)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__array[self.size()-<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">del</span> self.__array[self.size()-<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(self.size()&lt;=<span class=\"number\">0</span>):</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">out</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(self.__array)):</span><br><span class=\"line\">          <span class=\"built_in\">print</span>(self.__array[i],end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">s=<span class=\"string\">&quot;545*+5/&quot;</span></span><br><span class=\"line\">mst=Stack()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(s)):</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">ord</span>(s[i])&gt;=<span class=\"built_in\">ord</span>(<span class=\"string\">&quot;0&quot;</span>) <span class=\"keyword\">and</span> <span class=\"built_in\">ord</span>(s[i])&lt;=<span class=\"built_in\">ord</span>(<span class=\"string\">&quot;9&quot;</span>):</span><br><span class=\"line\">      mst.push(<span class=\"built_in\">ord</span>(s[i])-<span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;0&#x27;</span>))</span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      num2 = mst.top();</span><br><span class=\"line\">      mst.pop();</span><br><span class=\"line\">      num1 = mst.top();</span><br><span class=\"line\">      mst.pop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> s[i]==<span class=\"string\">&#x27;+&#x27;</span> :</span><br><span class=\"line\">          mst.push(num1+num2);</span><br><span class=\"line\">      <span class=\"keyword\">elif</span> s[i]==<span class=\"string\">&#x27;-&#x27;</span> :</span><br><span class=\"line\">          mst.push(num1-num2);</span><br><span class=\"line\">      <span class=\"keyword\">elif</span> s[i]==<span class=\"string\">&#x27;*&#x27;</span> :</span><br><span class=\"line\">          mst.push(num1*num2);</span><br><span class=\"line\">      <span class=\"keyword\">elif</span> s[i]==<span class=\"string\">&#x27;/&#x27;</span> :</span><br><span class=\"line\">          mst.push(num1/num2);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(mst.top())    </span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<h4 id=\"队列-Queue\"><a href=\"#队列-Queue\" class=\"headerlink\" title=\"队列(Queue)\"></a>队列(Queue)</h4><ul>\n<li><p>队列(Queue)，又名堆栈，是一种先进先出的数据结构</p>\n</li>\n<li><p>典型应用：迷宫问题、最短路径、岛屿问题等</p>\n<h4 id=\"队列的操作：\"><a href=\"#队列的操作：\" class=\"headerlink\" title=\"队列的操作：\"></a>队列的操作：</h4></li>\n<li><p>入队：push(content)</p>\n</li>\n<li><p>出队：pop()</p>\n</li>\n<li><p>获取队顶元素：front()//最先进队的</p>\n</li>\n<li><p>获取队头元素：back()//最后进队的</p>\n</li>\n<li><p>队列的大小：size()</p>\n</li>\n<li><p>队列是否为空： empty()</p>\n</li>\n<li><p>下面是leetcode官网的动图<br><img src=\"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_0_%E5%87%BA%E5%85%A5%E9%98%9F.gif\" alt=\"加载错误\"></p>\n<h4 id=\"Python实现队列\"><a href=\"#Python实现队列\" class=\"headerlink\" title=\"Python实现队列\"></a>Python实现队列</h4><p>在C++的STL中有封装好的栈，但是Python没有，以下是Python我封装的栈的类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span>():</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      self.__array = []</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self,content</span>):</span></span><br><span class=\"line\">      self.__array.append(content)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">size</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.__array)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(self.size()-<span class=\"number\">1</span>):</span><br><span class=\"line\">          self.__array[i]=self.__array[i+<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">front</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__array[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__array[self.size()-<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> self.size()&lt;=<span class=\"number\">0</span>:</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">out</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(self.size()):</span><br><span class=\"line\">          <span class=\"built_in\">print</span>(self.__array[i],end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>) </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"迷宫问题\"><a href=\"#迷宫问题\" class=\"headerlink\" title=\"迷宫问题\"></a>迷宫问题</h4><p>1为可以走 0为不可以走<br>问从列表的[0,0]走到[n,n]最少需要多少步，只能走上下左右</p>\n</li>\n<li><p>Python代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span>():</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.__array = []</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self,content</span>):</span></span><br><span class=\"line\">        self.__array.append(content)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">size</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.__array)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(self.size()-<span class=\"number\">1</span>):</span><br><span class=\"line\">            self.__array[i]=self.__array[i+<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">front</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__array[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__array[self.size()-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.size()&lt;=<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">out</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(self.size()):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(self.__array[i],end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>) </span><br><span class=\"line\">  info=[</span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  r,c=<span class=\"number\">4</span>,<span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">wayx,wayy = [<span class=\"number\">0</span>,-<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>],[-<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">mqu=Queue()</span><br><span class=\"line\"></span><br><span class=\"line\">mqu.push([<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>])</span><br><span class=\"line\">info[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">isFind=<span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> mqu.empty()==<span class=\"number\">0</span> <span class=\"keyword\">and</span> isFind!=<span class=\"literal\">True</span>:</span><br><span class=\"line\">    top=mqu.front()</span><br><span class=\"line\">    mqu.pop()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">        nx = top[<span class=\"number\">0</span>]+ wayx[i]</span><br><span class=\"line\">        ny = top[<span class=\"number\">1</span>]+ wayy[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nx &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> nx &lt;= r <span class=\"keyword\">and</span> ny &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> ny &lt;= c <span class=\"keyword\">and</span> info[nx][ny]==<span class=\"number\">1</span>:</span><br><span class=\"line\">            mqu.push([nx,ny,top[<span class=\"number\">2</span>]+<span class=\"number\">1</span>])</span><br><span class=\"line\">            info[nx][ny] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nx == r <span class=\"keyword\">and</span> ny == c:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(top[<span class=\"number\">2</span>]+<span class=\"number\">1</span>)</span><br><span class=\"line\">                isFind=<span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> isFind==<span class=\"literal\">False</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Can&#x27;t find anyway&quot;</span>)            </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><ul>\n<li><p>栈和队列是非常常用的数据结构，可以解决很多问题</p>\n</li>\n<li><p>栈：先进后出 ； 队列：先进先出 ，这就是它们的最大特点</p>\n</li>\n<li><p>本篇文章我将介绍Python和C++中的栈与队列，以及它们的基本操作</p>","more":"</li>\n</ul>\n<h4 id=\"栈-stack\"><a href=\"#栈-stack\" class=\"headerlink\" title=\"栈(stack)\"></a>栈(stack)</h4><ul>\n<li>栈(stack)，又名堆栈，是一种先进后出的数据结构</li>\n<li>典型应用：后缀表达式的求值、括号匹配问题</li>\n</ul>\n<h4 id=\"栈的操作：\"><a href=\"#栈的操作：\" class=\"headerlink\" title=\"栈的操作：\"></a>栈的操作：</h4><ul>\n<li>入栈：push(content)</li>\n<li>出栈：pop()</li>\n<li>获取栈顶元素：top()</li>\n<li>栈的大小：size()</li>\n<li>栈是否为空： empty()</li>\n<li>下面是leetcode官网的动图<br><img src=\"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_0_%E5%87%BA%E5%85%A5%E6%A0%88.gif\" alt=\"加载错误\"></li>\n</ul>\n<h4 id=\"Python实现栈\"><a href=\"#Python实现栈\" class=\"headerlink\" title=\"Python实现栈\"></a>Python实现栈</h4><p>在C++的STL中有封装好的栈，但是Python没有，以下是Python我封装的栈的类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>():</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.__array = []</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self,content</span>):</span></span><br><span class=\"line\">        self.__array.append(content)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">size</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.__array)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__array[self.size()-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">del</span> self.__array[self.size()-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.size()&lt;=<span class=\"number\">0</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">out</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(self.__array)):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(self.__array[i],end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"C-STL-栈\"><a href=\"#C-STL-栈\" class=\"headerlink\" title=\"C++.STL-栈\"></a>C++.STL-栈</h4><ul>\n<li><p>执行以下代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  queue&lt;<span class=\"keyword\">int</span>&gt; mqu;</span><br><span class=\"line\">  mqu.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  mqu.<span class=\"built_in\">push</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  mqu.<span class=\"built_in\">push</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">  mqu.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">  cout &lt;&lt; mqu.<span class=\"built_in\">top</span>()&lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; mqu.<span class=\"built_in\">size</span>() &lt;&lt; endl ;</span><br><span class=\"line\">  mqu.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">  mqu.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">  cout &lt;&lt; mqu.<span class=\"built_in\">empty</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 2 true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"后缀表达式的求值\"><a href=\"#后缀表达式的求值\" class=\"headerlink\" title=\"后缀表达式的求值\"></a>后缀表达式的求值</h4></li>\n<li><p>后缀表达式：把运算符后置的表达式</p>\n</li>\n<li><p>中缀表达式：1+2+3</p>\n</li>\n<li><p>优点：方便计算机识别计算，可以省略括号</p>\n</li>\n<li><p>栗子：545*+5/ 它以中缀表达式是这样表达的： (5+4*5)/5</p>\n</li>\n<li><p>C++代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Evaluate postfix expression</span></span><br><span class=\"line\"><span class=\"comment\">82/       128*+     545*+5/</span></span><br><span class=\"line\"><span class=\"comment\">*/</span> </span><br><span class=\"line\">stack&lt;<span class=\"keyword\">int</span>&gt; mst;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">postFixEvaluation</span><span class=\"params\">(string s)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(s.<span class=\"built_in\">at</span>(i)&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;s.<span class=\"built_in\">at</span>(i)&lt;=<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">          mst.<span class=\"built_in\">push</span>((<span class=\"keyword\">int</span>)(s.<span class=\"built_in\">at</span>(i)-<span class=\"string\">&#x27;0&#x27;</span>));</span><br><span class=\"line\">      <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> num2 = mst.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">          mst.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">          <span class=\"keyword\">int</span> num1 = mst.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">          mst.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(s.<span class=\"built_in\">at</span>(i)==<span class=\"string\">&#x27;+&#x27;</span>)</span><br><span class=\"line\">              mst.<span class=\"built_in\">push</span>(num1+num2);</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.<span class=\"built_in\">at</span>(i)==<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">              mst.<span class=\"built_in\">push</span>(num1-num2);</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.<span class=\"built_in\">at</span>(i)==<span class=\"string\">&#x27;*&#x27;</span>)</span><br><span class=\"line\">              mst.<span class=\"built_in\">push</span>(num1*num2);</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.<span class=\"built_in\">at</span>(i)==<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">              mst.<span class=\"built_in\">push</span>(num1/num2);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  string s=<span class=\"string\">&quot;128*+&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">postFixEvaluation</span>(s);</span><br><span class=\"line\">  cout &lt;&lt; mst.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Python代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>():</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      self.__array = []</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self,content</span>):</span></span><br><span class=\"line\">      self.__array.append(content)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">size</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.__array)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__array[self.size()-<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">del</span> self.__array[self.size()-<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(self.size()&lt;=<span class=\"number\">0</span>):</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">out</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(self.__array)):</span><br><span class=\"line\">          <span class=\"built_in\">print</span>(self.__array[i],end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">s=<span class=\"string\">&quot;545*+5/&quot;</span></span><br><span class=\"line\">mst=Stack()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(s)):</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">ord</span>(s[i])&gt;=<span class=\"built_in\">ord</span>(<span class=\"string\">&quot;0&quot;</span>) <span class=\"keyword\">and</span> <span class=\"built_in\">ord</span>(s[i])&lt;=<span class=\"built_in\">ord</span>(<span class=\"string\">&quot;9&quot;</span>):</span><br><span class=\"line\">      mst.push(<span class=\"built_in\">ord</span>(s[i])-<span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;0&#x27;</span>))</span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      num2 = mst.top();</span><br><span class=\"line\">      mst.pop();</span><br><span class=\"line\">      num1 = mst.top();</span><br><span class=\"line\">      mst.pop();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> s[i]==<span class=\"string\">&#x27;+&#x27;</span> :</span><br><span class=\"line\">          mst.push(num1+num2);</span><br><span class=\"line\">      <span class=\"keyword\">elif</span> s[i]==<span class=\"string\">&#x27;-&#x27;</span> :</span><br><span class=\"line\">          mst.push(num1-num2);</span><br><span class=\"line\">      <span class=\"keyword\">elif</span> s[i]==<span class=\"string\">&#x27;*&#x27;</span> :</span><br><span class=\"line\">          mst.push(num1*num2);</span><br><span class=\"line\">      <span class=\"keyword\">elif</span> s[i]==<span class=\"string\">&#x27;/&#x27;</span> :</span><br><span class=\"line\">          mst.push(num1/num2);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(mst.top())    </span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<h4 id=\"队列-Queue\"><a href=\"#队列-Queue\" class=\"headerlink\" title=\"队列(Queue)\"></a>队列(Queue)</h4><ul>\n<li><p>队列(Queue)，又名堆栈，是一种先进先出的数据结构</p>\n</li>\n<li><p>典型应用：迷宫问题、最短路径、岛屿问题等</p>\n<h4 id=\"队列的操作：\"><a href=\"#队列的操作：\" class=\"headerlink\" title=\"队列的操作：\"></a>队列的操作：</h4></li>\n<li><p>入队：push(content)</p>\n</li>\n<li><p>出队：pop()</p>\n</li>\n<li><p>获取队顶元素：front()//最先进队的</p>\n</li>\n<li><p>获取队头元素：back()//最后进队的</p>\n</li>\n<li><p>队列的大小：size()</p>\n</li>\n<li><p>队列是否为空： empty()</p>\n</li>\n<li><p>下面是leetcode官网的动图<br><img src=\"https://jihulab.com/ZiXuanYuan/blogpic/-/raw/main/pictures/2022/08/17_16_39_0_%E5%87%BA%E5%85%A5%E9%98%9F.gif\" alt=\"加载错误\"></p>\n<h4 id=\"Python实现队列\"><a href=\"#Python实现队列\" class=\"headerlink\" title=\"Python实现队列\"></a>Python实现队列</h4><p>在C++的STL中有封装好的栈，但是Python没有，以下是Python我封装的栈的类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span>():</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      self.__array = []</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self,content</span>):</span></span><br><span class=\"line\">      self.__array.append(content)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">size</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.__array)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(self.size()-<span class=\"number\">1</span>):</span><br><span class=\"line\">          self.__array[i]=self.__array[i+<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">front</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__array[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__array[self.size()-<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> self.size()&lt;=<span class=\"number\">0</span>:</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">out</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(self.size()):</span><br><span class=\"line\">          <span class=\"built_in\">print</span>(self.__array[i],end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>) </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"迷宫问题\"><a href=\"#迷宫问题\" class=\"headerlink\" title=\"迷宫问题\"></a>迷宫问题</h4><p>1为可以走 0为不可以走<br>问从列表的[0,0]走到[n,n]最少需要多少步，只能走上下左右</p>\n</li>\n<li><p>Python代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span>():</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.__array = []</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self,content</span>):</span></span><br><span class=\"line\">        self.__array.append(content)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">size</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.__array)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(self.size()-<span class=\"number\">1</span>):</span><br><span class=\"line\">            self.__array[i]=self.__array[i+<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">front</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__array[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__array[self.size()-<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.size()&lt;=<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">out</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(self.size()):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(self.__array[i],end=<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>) </span><br><span class=\"line\">  info=[</span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  r,c=<span class=\"number\">4</span>,<span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">wayx,wayy = [<span class=\"number\">0</span>,-<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>],[-<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">mqu=Queue()</span><br><span class=\"line\"></span><br><span class=\"line\">mqu.push([<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>])</span><br><span class=\"line\">info[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">isFind=<span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> mqu.empty()==<span class=\"number\">0</span> <span class=\"keyword\">and</span> isFind!=<span class=\"literal\">True</span>:</span><br><span class=\"line\">    top=mqu.front()</span><br><span class=\"line\">    mqu.pop()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">        nx = top[<span class=\"number\">0</span>]+ wayx[i]</span><br><span class=\"line\">        ny = top[<span class=\"number\">1</span>]+ wayy[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nx &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> nx &lt;= r <span class=\"keyword\">and</span> ny &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> ny &lt;= c <span class=\"keyword\">and</span> info[nx][ny]==<span class=\"number\">1</span>:</span><br><span class=\"line\">            mqu.push([nx,ny,top[<span class=\"number\">2</span>]+<span class=\"number\">1</span>])</span><br><span class=\"line\">            info[nx][ny] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nx == r <span class=\"keyword\">and</span> ny == c:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(top[<span class=\"number\">2</span>]+<span class=\"number\">1</span>)</span><br><span class=\"line\">                isFind=<span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> isFind==<span class=\"literal\">False</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Can&#x27;t find anyway&quot;</span>)            </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl7y5wuak000beousd5hn4tz4","category_id":"cl7y5wuas000reous4d5q6t80","_id":"cl7y5wuat000xeousfa0nbk4b"},{"post_id":"cl7y5wuao000feouseyl1gf0d","category_id":"cl7y5wuas000reous4d5q6t80","_id":"cl7y5wuav0015eousgm1q4no2"},{"post_id":"cl7y5wuaj0009eous7fdwcent","category_id":"cl7y5wuag0004eousfiby5zqm","_id":"cl7y5wuax001geous5zrk9y84"},{"post_id":"cl7y5wuaj0009eous7fdwcent","category_id":"cl7y5wuaq000jeous593wbdag","_id":"cl7y5wuax001jeous61hv5d64"},{"post_id":"cl7y5wuaj0009eous7fdwcent","category_id":"cl7y5wuaw001aeousdyvu9160","_id":"cl7y5wuax001keous02hc9ztk"},{"post_id":"cl7y5wuaa0001eous4qvc5fxq","category_id":"cl7y5wuag0004eousfiby5zqm","_id":"cl7y5wuay001neous3v3eh037"},{"post_id":"cl7y5wuaa0001eous4qvc5fxq","category_id":"cl7y5wuar000meousgc3r1m5w","_id":"cl7y5wuay001peousgtyy54zv"},{"post_id":"cl7y5wuaa0001eous4qvc5fxq","category_id":"cl7y5wuaw001eeousb657btnf","_id":"cl7y5wuay001teous3q1o4f8b"},{"post_id":"cl7y5wuae0003eous4qj00qcb","category_id":"cl7y5wuag0004eousfiby5zqm","_id":"cl7y5wuay001weouscj6f04j9"},{"post_id":"cl7y5wuae0003eous4qj00qcb","category_id":"cl7y5wuar000meousgc3r1m5w","_id":"cl7y5wuaz0020eous96xyhl22"},{"post_id":"cl7y5wuae0003eous4qj00qcb","category_id":"cl7y5wuax001leous2g6gfhvq","_id":"cl7y5wuaz0021eouseodx87vv"},{"post_id":"cl7y5wuap000ieous9upkfpl8","category_id":"cl7y5wuag0004eousfiby5zqm","_id":"cl7y5wuaz0023eousgy01cj2l"},{"post_id":"cl7y5wuap000ieous9upkfpl8","category_id":"cl7y5wuav0013eous2ej2hyon","_id":"cl7y5wub00025eousb4e804g1"},{"post_id":"cl7y5wuap000ieous9upkfpl8","category_id":"cl7y5wuay001seousfmidge5m","_id":"cl7y5wub00027eous5i8whnlc"},{"post_id":"cl7y5wuah0007eousgjj1dj3k","category_id":"cl7y5wuag0004eousfiby5zqm","_id":"cl7y5wub0002aeous47xb7vqe"},{"post_id":"cl7y5wuah0007eousgjj1dj3k","category_id":"cl7y5wuar000meousgc3r1m5w","_id":"cl7y5wub0002ceouseh2n153t"},{"post_id":"cl7y5wuah0007eousgjj1dj3k","category_id":"cl7y5wuaw001eeousb657btnf","_id":"cl7y5wub0002deousakuvb96e"},{"post_id":"cl7y5wuan000eeoushhpp40s4","category_id":"cl7y5wuag0004eousfiby5zqm","_id":"cl7y5wub1002eeousdp8m7evk"},{"post_id":"cl7y5wuan000eeoushhpp40s4","category_id":"cl7y5wuar000meousgc3r1m5w","_id":"cl7y5wub1002feous0vxxdptb"},{"post_id":"cl7y5wuan000eeoushhpp40s4","category_id":"cl7y5wuax001heousbyzzhoe8","_id":"cl7y5wub1002geous9547cij6"},{"post_id":"cl7y5wuan000eeoushhpp40s4","category_id":"cl7y5wuaz0022eous78t67fjn","_id":"cl7y5wub1002heous1o4910p9"},{"post_id":"cl7y5wuan000eeoushhpp40s4","category_id":"cl7y5wub00029eous8u7cagv3","_id":"cl7y5wub1002ieous1sk1bk41"}],"PostTag":[{"post_id":"cl7y5wuaa0001eous4qvc5fxq","tag_id":"cl7y5wuah0005eousa3f4blr4","_id":"cl7y5wuar000leouscarm64sx"},{"post_id":"cl7y5wuaa0001eous4qvc5fxq","tag_id":"cl7y5wual000deous8qhy9erp","_id":"cl7y5wuar000neousgz21glvg"},{"post_id":"cl7y5wuaa0001eous4qvc5fxq","tag_id":"cl7y5wuap000heous4v60hxq2","_id":"cl7y5wuas000peous0g8t8zpk"},{"post_id":"cl7y5wuae0003eous4qj00qcb","tag_id":"cl7y5wuah0005eousa3f4blr4","_id":"cl7y5wuas000qeous5xvbcmn4"},{"post_id":"cl7y5wuah0007eousgjj1dj3k","tag_id":"cl7y5wuah0005eousa3f4blr4","_id":"cl7y5wuat000yeous3q33c7m6"},{"post_id":"cl7y5wuah0007eousgjj1dj3k","tag_id":"cl7y5wual000deous8qhy9erp","_id":"cl7y5wuau000zeous0s492vn1"},{"post_id":"cl7y5wuah0007eousgjj1dj3k","tag_id":"cl7y5wuap000heous4v60hxq2","_id":"cl7y5wuau0012eous0phr92ef"},{"post_id":"cl7y5wuaj0009eous7fdwcent","tag_id":"cl7y5wuat000veous7ekzfkpf","_id":"cl7y5wuaw0018eousboaughbf"},{"post_id":"cl7y5wuaj0009eous7fdwcent","tag_id":"cl7y5wuap000heous4v60hxq2","_id":"cl7y5wuaw0019eousgq2ghba9"},{"post_id":"cl7y5wuaj0009eous7fdwcent","tag_id":"cl7y5wuav0014eous61tzbyl3","_id":"cl7y5wuaw001ceouse9dn1b3q"},{"post_id":"cl7y5wuak000beousd5hn4tz4","tag_id":"cl7y5wuav0017eous9egb95va","_id":"cl7y5wuaw001deousespp2ar4"},{"post_id":"cl7y5wuan000eeoushhpp40s4","tag_id":"cl7y5wuap000heous4v60hxq2","_id":"cl7y5wuay001oeousflmngmmz"},{"post_id":"cl7y5wuan000eeoushhpp40s4","tag_id":"cl7y5wuah0005eousa3f4blr4","_id":"cl7y5wuay001qeous3ixm7jb5"},{"post_id":"cl7y5wuan000eeoushhpp40s4","tag_id":"cl7y5wuaw001feousdk4kakc0","_id":"cl7y5wuay001ueouscx8816ak"},{"post_id":"cl7y5wuan000eeoushhpp40s4","tag_id":"cl7y5wuax001ieous2g4xgal6","_id":"cl7y5wuay001veoush2d1f0n0"},{"post_id":"cl7y5wuao000feouseyl1gf0d","tag_id":"cl7y5wuav0017eous9egb95va","_id":"cl7y5wuaz001zeous0rt12zlp"},{"post_id":"cl7y5wuap000ieous9upkfpl8","tag_id":"cl7y5wuay001reousampd09u8","_id":"cl7y5wub00024eous8yetc4k9"},{"post_id":"cl7y5wuap000ieous9upkfpl8","tag_id":"cl7y5wuah0005eousa3f4blr4","_id":"cl7y5wub00026eous9245b7ek"},{"post_id":"cl7y5wuap000ieous9upkfpl8","tag_id":"cl7y5wuaz001xeousb7943m5c","_id":"cl7y5wub00028eous2ui8cpec"},{"post_id":"cl7y5wuap000ieous9upkfpl8","tag_id":"cl7y5wuap000heous4v60hxq2","_id":"cl7y5wub0002beous1kanarou"}],"Tag":[{"name":"Python","_id":"cl7y5wuah0005eousa3f4blr4"},{"name":"Pygame","_id":"cl7y5wual000deous8qhy9erp"},{"name":"Code","_id":"cl7y5wuap000heous4v60hxq2"},{"name":"Html","_id":"cl7y5wuat000veous7ekzfkpf"},{"name":"博客","_id":"cl7y5wuav0014eous61tzbyl3"},{"name":"公告","_id":"cl7y5wuav0017eous9egb95va"},{"name":"Spider爬虫","_id":"cl7y5wuaw001feousdk4kakc0"},{"name":"类库","_id":"cl7y5wuax001ieous2g4xgal6"},{"name":"C++","_id":"cl7y5wuay001reousampd09u8"},{"name":"数据结构","_id":"cl7y5wuaz001xeousb7943m5c"}]}}